{"version":3,"sources":["../../node_modules/dotenv/package.json","../../node_modules/dotenv/lib/main.js","../../node_modules/dotenv/lib/env-options.js","../../node_modules/dotenv/lib/cli-options.js","../src/index.ts","../../node_modules/@bufbuild/protobuf/dist/esm/private/assert.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/enum.js","../../node_modules/@bufbuild/protobuf/dist/esm/message.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js","../../node_modules/@bufbuild/protobuf/dist/esm/field.js","../../node_modules/@bufbuild/protobuf/dist/esm/google/varint.js","../../node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js","../../node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-common.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-proto3.js","../../node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-common.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-proto3.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/names.js","../../node_modules/@bufbuild/protobuf/dist/esm/private/field.js","../../node_modules/@bufbuild/protobuf/dist/esm/proto3.js","../../node_modules/@bufbuild/protobuf/dist/esm/service-type.js","../gen/eliza_pb.ts","../gen/eliza_connect.ts","../../node_modules/dotenv/config.js"],"sourcesContent":["{\n  \"name\": \"dotenv\",\n  \"version\": \"16.3.1\",\n  \"description\": \"Loads environment variables from .env file\",\n  \"main\": \"lib/main.js\",\n  \"types\": \"lib/main.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./lib/main.d.ts\",\n      \"require\": \"./lib/main.js\",\n      \"default\": \"./lib/main.js\"\n    },\n    \"./config\": \"./config.js\",\n    \"./config.js\": \"./config.js\",\n    \"./lib/env-options\": \"./lib/env-options.js\",\n    \"./lib/env-options.js\": \"./lib/env-options.js\",\n    \"./lib/cli-options\": \"./lib/cli-options.js\",\n    \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"scripts\": {\n    \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n    \"lint\": \"standard\",\n    \"lint-readme\": \"standard-markdown\",\n    \"pretest\": \"npm run lint && npm run dts-check\",\n    \"test\": \"tap tests/*.js --100 -Rspec\",\n    \"prerelease\": \"npm test\",\n    \"release\": \"standard-version\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/motdotla/dotenv.git\"\n  },\n  \"funding\": \"https://github.com/motdotla/dotenv?sponsor=1\",\n  \"keywords\": [\n    \"dotenv\",\n    \"env\",\n    \".env\",\n    \"environment\",\n    \"variables\",\n    \"config\",\n    \"settings\"\n  ],\n  \"readmeFilename\": \"README.md\",\n  \"license\": \"BSD-2-Clause\",\n  \"devDependencies\": {\n    \"@definitelytyped/dtslint\": \"^0.0.133\",\n    \"@types/node\": \"^18.11.3\",\n    \"decache\": \"^4.6.1\",\n    \"sinon\": \"^14.0.1\",\n    \"standard\": \"^17.0.0\",\n    \"standard-markdown\": \"^7.1.0\",\n    \"standard-version\": \"^9.5.0\",\n    \"tap\": \"^16.3.0\",\n    \"tar\": \"^6.1.11\",\n    \"typescript\": \"^4.8.4\"\n  },\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"browser\": {\n    \"fs\": false\n  }\n}\n","const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development')\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    throw new Error('INVALID_DOTENV_KEY: Missing key part')\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    throw new Error('INVALID_DOTENV_KEY: Missing environment part')\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n\n  if (options && options.path && options.path.length > 0) {\n    dotenvPath = options.path\n  }\n\n  // Locate .env.vault\n  return dotenvPath.endsWith('.vault') ? dotenvPath : `${dotenvPath}.vault`\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    let processEnv = process.env\n    if (options && options.processEnv != null) {\n      processEnv = options.processEnv\n    }\n\n    DotenvModule.populate(processEnv, parsed, options)\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _debug(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  const vaultPath = _vaultPath(options)\n\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!fs.existsSync(vaultPath)) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.slice(0, 12)\n  const authTag = ciphertext.slice(-16)\n  ciphertext = ciphertext.slice(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)'\n      throw new Error(msg)\n    } else if (decryptionFailed) {\n      const msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY'\n      throw new Error(msg)\n    } else {\n      console.error('Error: ', error.code)\n      console.error('Error: ', error.message)\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n","// ../config.js accepts options via environment variables\nconst options = {}\n\nif (process.env.DOTENV_CONFIG_ENCODING != null) {\n  options.encoding = process.env.DOTENV_CONFIG_ENCODING\n}\n\nif (process.env.DOTENV_CONFIG_PATH != null) {\n  options.path = process.env.DOTENV_CONFIG_PATH\n}\n\nif (process.env.DOTENV_CONFIG_DEBUG != null) {\n  options.debug = process.env.DOTENV_CONFIG_DEBUG\n}\n\nif (process.env.DOTENV_CONFIG_OVERRIDE != null) {\n  options.override = process.env.DOTENV_CONFIG_OVERRIDE\n}\n\nif (process.env.DOTENV_CONFIG_DOTENV_KEY != null) {\n  options.DOTENV_KEY = process.env.DOTENV_CONFIG_DOTENV_KEY\n}\n\nmodule.exports = options\n","const re = /^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/\n\nmodule.exports = function optionMatcher (args) {\n  return args.reduce(function (acc, cur) {\n    const matches = cur.match(re)\n    if (matches) {\n      acc[matches[1]] = matches[2]\n    }\n    return acc\n  }, {})\n}\n","import { PromiseClient, createPromiseClient } from '@connectrpc/connect'\nimport { createConnectTransport } from '@connectrpc/connect-node'\nimport { ElizaService } from '../gen/eliza_connect' // TODO: This also needs to be exported in the package and should have a build command\nimport * as methods from '../gen/eliza_pb'\nimport 'dotenv/config'\n\ntype RecursivePartial<T> = {\n  [P in keyof T]?: RecursivePartial<T[P]>\n}\n\nexport class App {\n  private client: PromiseClient<typeof ElizaService>\n  private request: { appId: number; key: string }\n\n  constructor(\n    client: PromiseClient<typeof ElizaService>,\n    appId: number,\n    key: string\n  ) {\n    this.client = client\n    this.request = { appId, key }\n  }\n\n  static async connect(options: {\n    appId: number\n    key: string\n    baseUrl?: string\n  }) {\n    const transport = createConnectTransport({\n      baseUrl: options.baseUrl || 'https://inventory.hackclub.com',\n      httpVersion: '1.1'\n    })\n\n    const client = createPromiseClient(ElizaService, transport)\n    if (!(await client.verifyKey(options)))\n      throw new Error('App not found or invalid key')\n    return new App(client, options.appId, options.key)\n  }\n\n  // I would do this with a cleaner for-loop, but I can't get it to be typed in TypeScript\n  async createApp(request: RecursivePartial<methods.CreateAppRequest>) {\n    return await this.client.createApp({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async createInstance(\n    request: RecursivePartial<methods.CreateInstanceRequest>\n  ) {\n    return await this.client.createInstance({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async createItem(request: RecursivePartial<methods.CreateItemRequest>) {\n    return await this.client.createItem({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async createRecipe(request: RecursivePartial<methods.CreateRecipeRequest>) {\n    return await this.client.createRecipe({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async createTrade(request: RecursivePartial<methods.CreateTradeRequest>) {\n    return await this.client.createTrade({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async readIdentity(request: RecursivePartial<methods.ReadIdentityRequest>) {\n    return await this.client.readIdentity({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async readItem(request: RecursivePartial<methods.ReadItemRequest>) {\n    return await this.client.readItem({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async readInstance(request: RecursivePartial<methods.ReadInstanceRequest>) {\n    return await this.client.readInstance({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async readApp(request: RecursivePartial<methods.ReadAppRequest> = {}) {\n    return await this.client.readApp({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async readTrade(request: RecursivePartial<methods.ReadTradeRequest>) {\n    return await this.client.readTrade({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async readRecipe(request: RecursivePartial<methods.ReadRecipeRequest>) {\n    return await this.client.readRecipe({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async updateIdentityMetadata(\n    request: RecursivePartial<methods.UpdateIdentityMetadataRequest>\n  ) {\n    return await this.client.updateIdentityMetadata({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async updateInstance(\n    request: RecursivePartial<methods.UpdateInstanceRequest>\n  ) {\n    return await this.client.updateInstance({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async updateItem(request: RecursivePartial<methods.UpdateItemRequest>) {\n    return await this.client.updateItem({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async updateApp(request: RecursivePartial<methods.UpdateAppRequest>) {\n    const response = await this.client.updateApp({\n      ...this.request,\n      ...request\n    })\n    return response\n  }\n\n  async updateTrade(request: RecursivePartial<methods.UpdateTradeRequest>) {\n    return await this.client.updateTrade({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async updateRecipe(request: RecursivePartial<methods.UpdateRecipeRequest>) {\n    return await this.client.updateRecipe({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async deleteApp(request: RecursivePartial<methods.DeleteAppRequest>) {\n    return await this.client.deleteApp({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async deleteInstance(\n    request: RecursivePartial<methods.DeleteInstanceRequest>\n  ) {\n    return await this.client.deleteInstance({\n      ...this.request,\n      ...request\n    })\n  }\n\n  async closeTrade(request: RecursivePartial<methods.CloseTradeRequest>) {\n    return await this.client.closeTrade({\n      ...this.request,\n      ...request\n    })\n  }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Assert that condition is truthy or throw error (with message)\n */\nexport function assert(condition, msg) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\nconst FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;\n/**\n * Assert a valid signed protobuf 32-bit integer.\n */\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid int 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer.\n */\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid uint 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid protobuf float value.\n */\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid float 32: \" + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./assert.js\";\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\n/**\n * Get reflection information from a generated enum.\n * If this function is called on something other than a generated\n * enum, it raises an error.\n */\nexport function getEnumType(enumObject) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\n    const t = enumObject[enumTypeSymbol];\n    assert(t, \"missing enum type on enum object\");\n    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\n}\n/**\n * Sets reflection information on a generated enum.\n */\nexport function setEnumType(enumObject, typeName, values, opt) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v) => ({\n        no: v.no,\n        name: v.name,\n        localName: enumObject[v.no],\n    })), opt);\n}\n/**\n * Create a new EnumType with the given values.\n */\nexport function makeEnumType(typeName, values, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_opt) {\n    const names = Object.create(null);\n    const numbers = Object.create(null);\n    const normalValues = [];\n    for (const value of values) {\n        // We do not surface options at this time\n        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\n        const n = normalizeEnumValue(value);\n        normalValues.push(n);\n        names[value.name] = n;\n        numbers[value.no] = n;\n    }\n    return {\n        typeName,\n        values: normalValues,\n        // We do not surface options at this time\n        // options: opt?.options ?? Object.create(null),\n        findName(name) {\n            return names[name];\n        },\n        findNumber(no) {\n            return numbers[no];\n        },\n    };\n}\n/**\n * Create a new enum object with the given values.\n * Sets reflection information.\n */\nexport function makeEnum(typeName, values, opt) {\n    const enumObject = {};\n    for (const value of values) {\n        const n = normalizeEnumValue(value);\n        enumObject[n.localName] = n.no;\n        enumObject[n.no] = n.localName;\n    }\n    setEnumType(enumObject, typeName, values, opt);\n    return enumObject;\n}\nfunction normalizeEnumValue(value) {\n    if (\"localName\" in value) {\n        return value;\n    }\n    return Object.assign(Object.assign({}, value), { localName: value.name });\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Message is the base class of every message, generated, or created at\n * runtime.\n *\n * It is _not_ safe to extend this class. If you want to create a message at\n * run time, use proto3.makeMessageType().\n */\nexport class Message {\n    /**\n     * Compare with a message of the same type.\n     */\n    equals(other) {\n        return this.getType().runtime.util.equals(this.getType(), this, other);\n    }\n    /**\n     * Create a deep copy.\n     */\n    clone() {\n        return this.getType().runtime.util.clone(this);\n    }\n    /**\n     * Parse from binary data, merging fields.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    fromBinary(bytes, options) {\n        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);\n        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON value.\n     */\n    fromJson(jsonValue, options) {\n        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);\n        format.readMessage(type, jsonValue, opt, this);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON string.\n     */\n    fromJsonString(jsonString, options) {\n        let json;\n        try {\n            json = JSON.parse(jsonString);\n        }\n        catch (e) {\n            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        return this.fromJson(json, options);\n    }\n    /**\n     * Serialize the message to binary data.\n     */\n    toBinary(options) {\n        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();\n        bin.writeMessage(this, writer, opt);\n        return writer.finish();\n    }\n    /**\n     * Serialize the message to a JSON value, a JavaScript value that can be\n     * passed to JSON.stringify().\n     */\n    toJson(options) {\n        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);\n        return json.writeMessage(this, opt);\n    }\n    /**\n     * Serialize the message to a JSON string.\n     */\n    toJsonString(options) {\n        var _a;\n        const value = this.toJson(options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Override for serialization behavior. This will be invoked when calling\n     * JSON.stringify on this message (i.e. JSON.stringify(msg)).\n     *\n     * Note that this will not serialize google.protobuf.Any with a packed\n     * message because the protobuf JSON format specifies that it needs to be\n     * unpacked, and this is only possible with a type registry to look up the\n     * message type.  As a result, attempting to serialize a message with this\n     * type will throw an Error.\n     *\n     * This method is protected because you should not need to invoke it\n     * directly -- instead use JSON.stringify or toJsonString for\n     * stringified JSON.  Alternatively, if actual JSON is desired, you should\n     * use toJson.\n     */\n    toJSON() {\n        return this.toJson({\n            emitDefaultValues: true,\n        });\n    }\n    /**\n     * Retrieve the MessageType of this message - a singleton that represents\n     * the protobuf message declaration and provides metadata for reflection-\n     * based operations.\n     */\n    getType() {\n        // Any class that extends Message _must_ provide a complete static\n        // implementation of MessageType.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n        return Object.getPrototypeOf(this).constructor;\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\n/**\n * Create a new message type using the given runtime.\n */\nexport function makeMessageType(runtime, typeName, fields, opt) {\n    var _a;\n    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\n    const type = {\n        [localName]: function (data) {\n            runtime.util.initFields(this);\n            runtime.util.initPartial(data, this);\n        },\n    }[localName];\n    Object.setPrototypeOf(type.prototype, new Message());\n    Object.assign(type, {\n        runtime,\n        typeName,\n        fields: runtime.util.newFieldList(fields),\n        fromBinary(bytes, options) {\n            return new type().fromBinary(bytes, options);\n        },\n        fromJson(jsonValue, options) {\n            return new type().fromJson(jsonValue, options);\n        },\n        fromJsonString(jsonString, options) {\n            return new type().fromJsonString(jsonString, options);\n        },\n        equals(a, b) {\n            return runtime.util.equals(type, a, b);\n        },\n    });\n    return type;\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getEnumType, makeEnum, makeEnumType } from \"./enum.js\";\nimport { makeMessageType } from \"./message-type.js\";\nexport function makeProtoRuntime(syntax, json, bin, util) {\n    return {\n        syntax,\n        json,\n        bin,\n        util,\n        makeMessageType(typeName, fields, opt) {\n            return makeMessageType(this, typeName, fields, opt);\n        },\n        makeEnum,\n        makeEnumType,\n        getEnumType,\n    };\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of fields with 64 bit integral types (int64, uint64,\n * sint64, fixed64, sfixed64).\n *\n * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,\n * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use\n * String if `[jstype = JS_STRING]` is specified.\n *\n * ```protobuf\n * uint64 field_a = 1; // BigInt\n * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt\n * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt\n * uint64 field_b = 2 [jstype = JS_STRING]; // String\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript BigInt.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript String.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n})(LongType || (LongType = {}));\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = (bits.hi & 0x80000000);\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1FFFFF) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xFFFFFF;\n    const mid = ((lo >>> 24) | (hi << 8)) & 0xFFFFFF;\n    const high = (hi >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) +\n        decimalFrom1e7WithLeadingZeros(digitA);\n}\nfunction toUnsigned(lo, hi) {\n    return { lo: lo >>> 0, hi: hi >>> 0 };\n}\nfunction newBits(lo, hi) {\n    return { lo: lo | 0, hi: hi | 0 };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    }\n    else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = (digit1e7) => {\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push((value & 127) | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { int64FromString, int64ToString, uInt64ToString, } from \"./google/varint.js\";\nfunction makeInt64Support() {\n    const dv = new DataView(new ArrayBuffer(8));\n    // note that Safari 14 implements BigInt, but not the DataView methods\n    const ok = typeof BigInt === \"function\" &&\n        typeof dv.getBigInt64 === \"function\" &&\n        typeof dv.getBigUint64 === \"function\" &&\n        typeof dv.setBigInt64 === \"function\" &&\n        typeof dv.setBigUint64 === \"function\" &&\n        (typeof process != \"object\" ||\n            typeof process.env != \"object\" ||\n            process.env.BUF_BIGINT_DISABLE !== \"1\");\n    if (ok) {\n        const MIN = BigInt(\"-9223372036854775808\"), MAX = BigInt(\"9223372036854775807\"), UMIN = BigInt(\"0\"), UMAX = BigInt(\"18446744073709551615\");\n        return {\n            zero: BigInt(0),\n            supported: true,\n            parse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > MAX || bi < MIN) {\n                    throw new Error(`int64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            uParse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > UMAX || bi < UMIN) {\n                    throw new Error(`uint64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            enc(value) {\n                dv.setBigInt64(0, this.parse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            uEnc(value) {\n                dv.setBigInt64(0, this.uParse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            dec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigInt64(0, true);\n            },\n            uDec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigUint64(0, true);\n            },\n        };\n    }\n    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);\n    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);\n    return {\n        zero: \"0\",\n        supported: false,\n        parse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return value;\n        },\n        uParse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return value;\n        },\n        enc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return int64FromString(value);\n        },\n        uEnc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return int64FromString(value);\n        },\n        dec(lo, hi) {\n            return int64ToString(lo, hi);\n        },\n        uDec(lo, hi) {\n            return uInt64ToString(lo, hi);\n        },\n    };\n}\nexport const protoInt64 = makeInt64Support();\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { varint32read, varint32write, varint64read, varint64write, } from \"./google/varint.js\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./private/assert.js\";\nimport { protoInt64 } from \"./proto-int64.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error(\"invalid state, fork stack empty\");\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32(((fieldNo << 3) | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let tc = protoInt64.enc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let tc = protoInt64.enc(value), \n        // zigzag encode\n        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let tc = protoInt64.uEnc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit64:\n                this.pos += 4;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return protoInt64.dec(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return protoInt64.uDec(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;\n        hi = (hi >>> 1) ^ s;\n        return protoInt64.dec(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return protoInt64.uDec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return protoInt64.dec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../field.js\";\n/**\n * Wrap a primitive message field value in its corresponding wrapper\n * message. This function is idempotent.\n */\nexport function wrapField(type, value) {\n    if (value instanceof Message || !type.fieldWrapper) {\n        return value;\n    }\n    return type.fieldWrapper.wrapField(value);\n}\n/**\n * If the given field uses one of the well-known wrapper types, return\n * the primitive type it wraps.\n */\nexport function getUnwrappedFieldType(field) {\n    if (field.fieldKind !== \"message\") {\n        return undefined;\n    }\n    if (field.repeated) {\n        return undefined;\n    }\n    if (field.oneof != undefined) {\n        return undefined;\n    }\n    return wktWrapperToScalarType[field.message.typeName];\n}\nconst wktWrapperToScalarType = {\n    \"google.protobuf.DoubleValue\": ScalarType.DOUBLE,\n    \"google.protobuf.FloatValue\": ScalarType.FLOAT,\n    \"google.protobuf.Int64Value\": ScalarType.INT64,\n    \"google.protobuf.UInt64Value\": ScalarType.UINT64,\n    \"google.protobuf.Int32Value\": ScalarType.INT32,\n    \"google.protobuf.UInt32Value\": ScalarType.UINT32,\n    \"google.protobuf.BoolValue\": ScalarType.BOOL,\n    \"google.protobuf.StringValue\": ScalarType.STRING,\n    \"google.protobuf.BytesValue\": ScalarType.BYTES,\n};\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { LongType, ScalarType } from \"../field.js\";\nimport { WireType } from \"../binary-encoding.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Returns true if both scalar values are equal.\n */\nexport function scalarEquals(type, a, b) {\n    if (a === b) {\n        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n        return true;\n    }\n    // Special case BYTES - we need to compare each byte individually\n    if (type == ScalarType.BYTES) {\n        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Special case 64-bit integers - we support number, string and bigint representation.\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (type) {\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // Loose comparison will match between 0n, 0 and \"0\".\n            return a == b;\n    }\n    // Anything that hasn't been caught by strict comparison or special cased\n    // BYTES and 64-bit integers is not equal.\n    return false;\n}\n/**\n * Returns the default value for the given scalar type, following\n * proto3 semantics.\n */\nexport function scalarDefaultValue(type, longType) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            return longType == 0 ? protoInt64.zero : \"0\";\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n            // We do not use individual cases to save a few bytes code size.\n            return 0;\n    }\n}\n/**\n * Get information for writing a scalar value.\n *\n * Returns tuple:\n * [0]: appropriate WireType\n * [1]: name of the appropriate method of IBinaryWriter\n * [2]: whether the given value is a default value for proto3 semantics\n *\n * If argument `value` is omitted, [2] is always false.\n */\nexport function scalarTypeInfo(type, value) {\n    const isUndefined = value === undefined;\n    let wireType = WireType.Varint;\n    let isIntrinsicDefault = value === 0;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\n    switch (type) {\n        case ScalarType.STRING:\n            isIntrinsicDefault = isUndefined || !value.length;\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.BOOL:\n            isIntrinsicDefault = value === false;\n            break;\n        case ScalarType.DOUBLE:\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.FLOAT:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.INT64:\n            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n            break;\n        case ScalarType.UINT64:\n            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n            break;\n        case ScalarType.FIXED64:\n            isIntrinsicDefault = isUndefined || value == 0; // Loose comparison matches 0n, 0 and \"0\"\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.BYTES:\n            isIntrinsicDefault = isUndefined || !value.byteLength;\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.FIXED32:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.SFIXED32:\n            wireType = WireType.Bit32;\n            break;\n        case ScalarType.SFIXED64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.SINT64:\n            isIntrinsicDefault = isUndefined || value == 0;\n            break;\n    }\n    const method = ScalarType[type].toLowerCase();\n    return [wireType, method, isUndefined || isIntrinsicDefault];\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { BinaryReader, BinaryWriter, WireType } from \"../binary-encoding.js\";\nimport { Message } from \"../message.js\";\nimport { LongType, ScalarType } from \"../field.js\";\nimport { wrapField } from \"./field-wrapper.js\";\nimport { scalarDefaultValue, scalarTypeInfo } from \"./scalars.js\";\nimport { assert } from \"./assert.js\";\n/* eslint-disable @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unnecessary-condition, no-case-declarations, prefer-const */\nconst unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\n// Default options for parsing binary data.\nconst readDefaults = {\n    readUnknownFields: true,\n    readerFactory: (bytes) => new BinaryReader(bytes),\n};\n// Default options for serializing binary data.\nconst writeDefaults = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nexport function makeBinaryFormatCommon() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        listUnknownFields(message) {\n            var _a;\n            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\n        },\n        discardUnknownFields(message) {\n            delete message[unknownFieldsSymbol];\n        },\n        writeUnknownFields(message, writer) {\n            const m = message;\n            const c = m[unknownFieldsSymbol];\n            if (c) {\n                for (const f of c) {\n                    writer.tag(f.no, f.wireType).raw(f.data);\n                }\n            }\n        },\n        onUnknownField(message, no, wireType, data) {\n            const m = message;\n            if (!Array.isArray(m[unknownFieldsSymbol])) {\n                m[unknownFieldsSymbol] = [];\n            }\n            m[unknownFieldsSymbol].push({ no, wireType, data });\n        },\n        readMessage(message, reader, length, options) {\n            const type = message.getType();\n            const end = length === undefined ? reader.len : reader.pos + length;\n            while (reader.pos < end) {\n                const [fieldNo, wireType] = reader.tag(), field = type.fields.find(fieldNo);\n                if (!field) {\n                    const data = reader.skip(wireType);\n                    if (options.readUnknownFields) {\n                        this.onUnknownField(message, fieldNo, wireType, data);\n                    }\n                    continue;\n                }\n                let target = message, repeated = field.repeated, localName = field.localName;\n                if (field.oneof) {\n                    target = target[field.oneof.localName];\n                    if (target.case != localName) {\n                        delete target.value;\n                    }\n                    target.case = localName;\n                    localName = \"value\";\n                }\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        const scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                        let read = readScalar;\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n                        if (field.kind == \"scalar\" && field.L > 0) {\n                            read = readScalarLTString;\n                        }\n                        if (repeated) {\n                            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                            if (wireType == WireType.LengthDelimited &&\n                                scalarType != ScalarType.STRING &&\n                                scalarType != ScalarType.BYTES) {\n                                let e = reader.uint32() + reader.pos;\n                                while (reader.pos < e) {\n                                    arr.push(read(reader, scalarType));\n                                }\n                            }\n                            else {\n                                arr.push(read(reader, scalarType));\n                            }\n                        }\n                        else {\n                            target[localName] = read(reader, scalarType);\n                        }\n                        break;\n                    case \"message\":\n                        const messageType = field.T;\n                        if (repeated) {\n                            // safe to assume presence of array, oneof cannot contain repeated values\n                            target[localName].push(readMessageField(reader, new messageType(), options));\n                        }\n                        else {\n                            if (target[localName] instanceof Message) {\n                                readMessageField(reader, target[localName], options);\n                            }\n                            else {\n                                target[localName] = readMessageField(reader, new messageType(), options);\n                                if (messageType.fieldWrapper &&\n                                    !field.oneof &&\n                                    !field.repeated) {\n                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                                }\n                            }\n                        }\n                        break;\n                    case \"map\":\n                        let [mapKey, mapVal] = readMapEntry(field, reader, options);\n                        // safe to assume presence of map object, oneof cannot contain repeated values\n                        target[localName][mapKey] = mapVal;\n                        break;\n                }\n            }\n        },\n    };\n}\n// Read a message, avoiding MessageType.fromBinary() to re-use the\n// BinaryReadOptions and the IBinaryReader.\nfunction readMessageField(reader, message, options) {\n    const format = message.getType().runtime.bin;\n    format.readMessage(message, reader, reader.uint32(), options);\n    return message;\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(field, reader, options) {\n    const length = reader.uint32(), end = reader.pos + length;\n    let key, val;\n    while (reader.pos < end) {\n        let [fieldNo] = reader.tag();\n        switch (fieldNo) {\n            case 1:\n                key = readScalar(reader, field.K);\n                break;\n            case 2:\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        val = readScalar(reader, field.V.T);\n                        break;\n                    case \"enum\":\n                        val = reader.int32();\n                        break;\n                    case \"message\":\n                        val = readMessageField(reader, new field.V.T(), options);\n                        break;\n                }\n                break;\n        }\n    }\n    if (key === undefined) {\n        let keyRaw = scalarDefaultValue(field.K, LongType.BIGINT);\n        key =\n            field.K == ScalarType.BOOL\n                ? keyRaw.toString()\n                : keyRaw;\n    }\n    if (typeof key != \"string\" && typeof key != \"number\") {\n        key = key.toString();\n    }\n    if (val === undefined) {\n        switch (field.V.kind) {\n            case \"scalar\":\n                val = scalarDefaultValue(field.V.T, LongType.BIGINT);\n                break;\n            case \"enum\":\n                val = 0;\n                break;\n            case \"message\":\n                val = new field.V.T();\n                break;\n        }\n    }\n    return [key, val];\n}\n// Read a scalar value, but return 64 bit integral types (int64, uint64,\n// sint64, fixed64, sfixed64) as string instead of bigint.\nexport function readScalarLTString(reader, type) {\n    const v = readScalar(reader, type);\n    return typeof v == \"bigint\" ? v.toString() : v;\n}\n// Does not use scalarTypeInfo() for better performance.\nfunction readScalar(reader, type) {\n    switch (type) {\n        case ScalarType.STRING:\n            return reader.string();\n        case ScalarType.BOOL:\n            return reader.bool();\n        case ScalarType.DOUBLE:\n            return reader.double();\n        case ScalarType.FLOAT:\n            return reader.float();\n        case ScalarType.INT32:\n            return reader.int32();\n        case ScalarType.INT64:\n            return reader.int64();\n        case ScalarType.UINT64:\n            return reader.uint64();\n        case ScalarType.FIXED64:\n            return reader.fixed64();\n        case ScalarType.BYTES:\n            return reader.bytes();\n        case ScalarType.FIXED32:\n            return reader.fixed32();\n        case ScalarType.SFIXED32:\n            return reader.sfixed32();\n        case ScalarType.SFIXED64:\n            return reader.sfixed64();\n        case ScalarType.SINT64:\n            return reader.sint64();\n        case ScalarType.UINT32:\n            return reader.uint32();\n        case ScalarType.SINT32:\n            return reader.sint32();\n    }\n}\nexport function writeMapEntry(writer, options, field, key, value) {\n    writer.tag(field.no, WireType.LengthDelimited);\n    writer.fork();\n    // javascript only allows number or string for object properties\n    // we convert from our representation to the protobuf type\n    let keyValue = key;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\n    switch (field.K) {\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n            keyValue = Number.parseInt(key);\n            break;\n        case ScalarType.BOOL:\n            assert(key == \"true\" || key == \"false\");\n            keyValue = key == \"true\";\n            break;\n    }\n    // write key, expecting key field number = 1\n    writeScalar(writer, field.K, 1, keyValue, true);\n    // write value, expecting value field number = 2\n    switch (field.V.kind) {\n        case \"scalar\":\n            writeScalar(writer, field.V.T, 2, value, true);\n            break;\n        case \"enum\":\n            writeScalar(writer, ScalarType.INT32, 2, value, true);\n            break;\n        case \"message\":\n            writeMessageField(writer, options, field.V.T, 2, value);\n            break;\n    }\n    writer.join();\n}\nexport function writeMessageField(writer, options, type, fieldNo, value) {\n    if (value !== undefined) {\n        const message = wrapField(type, value);\n        writer\n            .tag(fieldNo, WireType.LengthDelimited)\n            .bytes(message.toBinary(options));\n    }\n}\nexport function writeScalar(writer, type, fieldNo, value, emitIntrinsicDefault) {\n    let [wireType, method, isIntrinsicDefault] = scalarTypeInfo(type, value);\n    if (!isIntrinsicDefault || emitIntrinsicDefault) {\n        writer.tag(fieldNo, wireType)[method](value);\n    }\n}\nexport function writePacked(writer, type, fieldNo, value) {\n    if (!value.length) {\n        return;\n    }\n    writer.tag(fieldNo, WireType.LengthDelimited).fork();\n    let [, method] = scalarTypeInfo(type);\n    for (let i = 0; i < value.length; i++) {\n        writer[method](value[i]);\n    }\n    writer.join();\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ScalarType } from \"../field.js\";\nimport { makeBinaryFormatCommon, writeMapEntry, writeMessageField, writePacked, writeScalar, } from \"./binary-format-common.js\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions, prefer-const, no-case-declarations */\nexport function makeBinaryFormatProto3() {\n    return Object.assign(Object.assign({}, makeBinaryFormatCommon()), { writeMessage(message, writer, options) {\n            const type = message.getType();\n            for (const field of type.fields.byNumber()) {\n                let value, // this will be our field value, whether it is member of a oneof or regular field\n                repeated = field.repeated, localName = field.localName;\n                if (field.oneof) {\n                    const oneof = message[field.oneof.localName];\n                    if (oneof.case !== localName) {\n                        continue; // field is not selected, skip\n                    }\n                    value = oneof.value;\n                }\n                else {\n                    value = message[localName];\n                }\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        let scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                        if (repeated) {\n                            if (field.packed) {\n                                writePacked(writer, scalarType, field.no, value);\n                            }\n                            else {\n                                for (const item of value) {\n                                    writeScalar(writer, scalarType, field.no, item, true);\n                                }\n                            }\n                        }\n                        else {\n                            if (value !== undefined) {\n                                writeScalar(writer, scalarType, field.no, value, !!field.oneof || field.opt);\n                            }\n                        }\n                        break;\n                    case \"message\":\n                        if (repeated) {\n                            for (const item of value) {\n                                writeMessageField(writer, options, field.T, field.no, item);\n                            }\n                        }\n                        else {\n                            writeMessageField(writer, options, field.T, field.no, value);\n                        }\n                        break;\n                    case \"map\":\n                        for (const [key, val] of Object.entries(value)) {\n                            writeMapEntry(writer, options, field, key, val);\n                        }\n                        break;\n                }\n            }\n            if (options.writeUnknownFields) {\n                this.writeUnknownFields(message, writer);\n            }\n            return writer;\n        } });\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */\n// lookup table from base64 character to byte\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\nexport const protoBase64 = {\n    /**\n     * Decodes a base64 string to a byte array.\n     *\n     * - ignores white-space, including line breaks and tabs\n     * - allows inner padding (can decode concatenated base64 strings)\n     * - does not require padding\n     * - understands base64url encoding:\n     *   \"-\" instead of \"+\",\n     *   \"_\" instead of \"/\",\n     *   no padding\n     */\n    dec(base64Str) {\n        // estimate byte size, not accounting for inner padding and whitespace\n        let es = (base64Str.length * 3) / 4;\n        if (base64Str[base64Str.length - 2] == \"=\")\n            es -= 2;\n        else if (base64Str[base64Str.length - 1] == \"=\")\n            es -= 1;\n        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n        groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // previous byte\n        for (let i = 0; i < base64Str.length; i++) {\n            b = decTable[base64Str.charCodeAt(i)];\n            if (b === undefined) {\n                switch (base64Str[i]) {\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"=\":\n                        groupPos = 0; // reset state when padding found\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"\\n\":\n                    case \"\\r\":\n                    case \"\\t\":\n                    case \" \":\n                        continue; // skip white-space, and padding\n                    default:\n                        throw Error(\"invalid base64 string.\");\n                }\n            }\n            switch (groupPos) {\n                case 0:\n                    p = b;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);\n                    p = b;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);\n                    p = b;\n                    groupPos = 3;\n                    break;\n                case 3:\n                    bytes[bytePos++] = ((p & 3) << 6) | b;\n                    groupPos = 0;\n                    break;\n            }\n        }\n        if (groupPos == 1)\n            throw Error(\"invalid base64 string.\");\n        return bytes.subarray(0, bytePos);\n    },\n    /**\n     * Encode a byte array to a base64 string.\n     */\n    enc(bytes) {\n        let base64 = \"\", groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // carry over from previous byte\n        for (let i = 0; i < bytes.length; i++) {\n            b = bytes[i];\n            switch (groupPos) {\n                case 0:\n                    base64 += encTable[b >> 2];\n                    p = (b & 3) << 4;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    base64 += encTable[p | (b >> 4)];\n                    p = (b & 15) << 2;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    base64 += encTable[p | (b >> 6)];\n                    base64 += encTable[b & 63];\n                    groupPos = 0;\n                    break;\n            }\n        }\n        // add output padding\n        if (groupPos) {\n            base64 += encTable[p];\n            base64 += \"=\";\n            if (groupPos == 1)\n                base64 += \"=\";\n        }\n        return base64;\n    },\n};\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { LongType, ScalarType } from \"../field.js\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { protoBase64 } from \"../proto-base64.js\";\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\n// Default options for parsing JSON.\nconst jsonReadDefaults = {\n    ignoreUnknownFields: false,\n};\n// Default options for serializing to JSON.\nconst jsonWriteDefaults = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\n}\nexport function makeJsonFormatCommon(makeWriteField) {\n    const writeField = makeWriteField(writeEnum, writeScalar);\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        readMessage(type, json, options, message) {\n            if (json == null || Array.isArray(json) || typeof json != \"object\") {\n                throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json)}`);\n            }\n            message = message !== null && message !== void 0 ? message : new type();\n            const oneofSeen = {};\n            for (const [jsonKey, jsonValue] of Object.entries(json)) {\n                const field = type.fields.findJsonName(jsonKey);\n                if (!field) {\n                    if (!options.ignoreUnknownFields) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: key \"${jsonKey}\" is unknown`);\n                    }\n                    continue;\n                }\n                let localName = field.localName;\n                let target = message;\n                if (field.oneof) {\n                    if (jsonValue === null && field.kind == \"scalar\") {\n                        // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}\n                        continue;\n                    }\n                    const seen = oneofSeen[field.oneof.localName];\n                    if (seen) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof \"${field.oneof.name}\" present: \"${seen}\", \"${jsonKey}\"`);\n                    }\n                    oneofSeen[field.oneof.localName] = jsonKey;\n                    target = target[field.oneof.localName] = { case: localName };\n                    localName = \"value\";\n                }\n                if (field.repeated) {\n                    if (jsonValue === null) {\n                        continue;\n                    }\n                    if (!Array.isArray(jsonValue)) {\n                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);\n                    }\n                    const targetArray = target[localName];\n                    for (const jsonItem of jsonValue) {\n                        if (jsonItem === null) {\n                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);\n                        }\n                        let val;\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- \"map\" is invalid for repeated fields\n                        switch (field.kind) {\n                            case \"message\":\n                                val = field.T.fromJson(jsonItem, options);\n                                break;\n                            case \"enum\":\n                                val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);\n                                if (val === undefined)\n                                    continue;\n                                break;\n                            case \"scalar\":\n                                try {\n                                    val = readScalar(field.T, jsonItem, field.L);\n                                }\n                                catch (e) {\n                                    let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;\n                                    if (e instanceof Error && e.message.length > 0) {\n                                        m += `: ${e.message}`;\n                                    }\n                                    throw new Error(m);\n                                }\n                                break;\n                        }\n                        targetArray.push(val);\n                    }\n                }\n                else if (field.kind == \"map\") {\n                    if (jsonValue === null) {\n                        continue;\n                    }\n                    if (Array.isArray(jsonValue) || typeof jsonValue != \"object\") {\n                        throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);\n                    }\n                    const targetMap = target[localName];\n                    for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {\n                        if (jsonMapValue === null) {\n                            throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);\n                        }\n                        let val;\n                        switch (field.V.kind) {\n                            case \"message\":\n                                val = field.V.T.fromJson(jsonMapValue, options);\n                                break;\n                            case \"enum\":\n                                val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);\n                                if (val === undefined)\n                                    continue;\n                                break;\n                            case \"scalar\":\n                                try {\n                                    val = readScalar(field.V.T, jsonMapValue, LongType.BIGINT);\n                                }\n                                catch (e) {\n                                    let m = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                                    if (e instanceof Error && e.message.length > 0) {\n                                        m += `: ${e.message}`;\n                                    }\n                                    throw new Error(m);\n                                }\n                                break;\n                        }\n                        try {\n                            targetMap[readScalar(field.K, field.K == ScalarType.BOOL\n                                ? jsonMapKey == \"true\"\n                                    ? true\n                                    : jsonMapKey == \"false\"\n                                        ? false\n                                        : jsonMapKey\n                                : jsonMapKey, LongType.BIGINT).toString()] = val;\n                        }\n                        catch (e) {\n                            let m = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                            if (e instanceof Error && e.message.length > 0) {\n                                m += `: ${e.message}`;\n                            }\n                            throw new Error(m);\n                        }\n                    }\n                }\n                else {\n                    switch (field.kind) {\n                        case \"message\":\n                            const messageType = field.T;\n                            if (jsonValue === null &&\n                                messageType.typeName != \"google.protobuf.Value\") {\n                                if (field.oneof) {\n                                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field \"${jsonKey}\"`);\n                                }\n                                continue;\n                            }\n                            if (target[localName] instanceof Message) {\n                                target[localName].fromJson(jsonValue, options);\n                            }\n                            else {\n                                target[localName] = messageType.fromJson(jsonValue, options);\n                                if (messageType.fieldWrapper && !field.oneof) {\n                                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                                }\n                            }\n                            break;\n                        case \"enum\":\n                            const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);\n                            if (enumValue !== undefined) {\n                                target[localName] = enumValue;\n                            }\n                            break;\n                        case \"scalar\":\n                            try {\n                                target[localName] = readScalar(field.T, jsonValue, field.L);\n                            }\n                            catch (e) {\n                                let m = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;\n                                if (e instanceof Error && e.message.length > 0) {\n                                    m += `: ${e.message}`;\n                                }\n                                throw new Error(m);\n                            }\n                            break;\n                    }\n                }\n            }\n            return message;\n        },\n        writeMessage(message, options) {\n            const type = message.getType();\n            const json = {};\n            let field;\n            try {\n                for (const member of type.fields.byMember()) {\n                    let jsonValue;\n                    if (member.kind == \"oneof\") {\n                        const oneof = message[member.localName];\n                        if (oneof.value === undefined) {\n                            continue;\n                        }\n                        field = member.findField(oneof.case);\n                        if (!field) {\n                            throw \"oneof case not found: \" + oneof.case;\n                        }\n                        jsonValue = writeField(field, oneof.value, options);\n                    }\n                    else {\n                        field = member;\n                        jsonValue = writeField(field, message[field.localName], options);\n                    }\n                    if (jsonValue !== undefined) {\n                        json[options.useProtoFieldName ? field.name : field.jsonName] =\n                            jsonValue;\n                    }\n                }\n            }\n            catch (e) {\n                const m = field\n                    ? `cannot encode field ${type.typeName}.${field.name} to JSON`\n                    : `cannot encode message ${type.typeName} to JSON`;\n                const r = e instanceof Error ? e.message : String(e);\n                throw new Error(m + (r.length > 0 ? `: ${r}` : \"\"));\n            }\n            return json;\n        },\n        readScalar,\n        writeScalar,\n        debug: debugJsonValue,\n    };\n}\nfunction debugJsonValue(json) {\n    if (json === null) {\n        return \"null\";\n    }\n    switch (typeof json) {\n        case \"object\":\n            return Array.isArray(json) ? \"array\" : \"object\";\n        case \"string\":\n            return json.length > 100 ? \"string\" : `\"${json.split('\"').join('\\\\\"')}\"`;\n        default:\n            return String(json);\n    }\n}\n// May throw an error. If the error message is non-blank, it should be shown.\n// It is up to the caller to provide context.\nfunction readScalar(type, json, longType) {\n    // every valid case in the switch below returns, and every fall\n    // through is regarded as a failure.\n    switch (type) {\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            if (json === null)\n                return 0.0;\n            if (json === \"NaN\")\n                return Number.NaN;\n            if (json === \"Infinity\")\n                return Number.POSITIVE_INFINITY;\n            if (json === \"-Infinity\")\n                return Number.NEGATIVE_INFINITY;\n            if (json === \"\") {\n                // empty string is not a number\n                break;\n            }\n            if (typeof json == \"string\" && json.trim().length !== json.length) {\n                // extra whitespace\n                break;\n            }\n            if (typeof json != \"string\" && typeof json != \"number\") {\n                break;\n            }\n            const float = Number(json);\n            if (Number.isNaN(float)) {\n                // not a number\n                break;\n            }\n            if (!Number.isFinite(float)) {\n                // infinity and -infinity are handled by string representation above, so this is an error\n                break;\n            }\n            if (type == ScalarType.FLOAT)\n                assertFloat32(float);\n            return float;\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.UINT32:\n            if (json === null)\n                return 0;\n            let int32;\n            if (typeof json == \"number\")\n                int32 = json;\n            else if (typeof json == \"string\" && json.length > 0) {\n                if (json.trim().length === json.length)\n                    int32 = Number(json);\n            }\n            if (int32 === undefined)\n                break;\n            if (type == ScalarType.UINT32)\n                assertUInt32(int32);\n            else\n                assertInt32(int32);\n            return int32;\n        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            if (json === null)\n                return protoInt64.zero;\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const long = protoInt64.parse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? long.toString() : long;\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            if (json === null)\n                return protoInt64.zero;\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const uLong = protoInt64.uParse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? uLong.toString() : uLong;\n        // bool:\n        case ScalarType.BOOL:\n            if (json === null)\n                return false;\n            if (typeof json !== \"boolean\")\n                break;\n            return json;\n        // string:\n        case ScalarType.STRING:\n            if (json === null)\n                return \"\";\n            if (typeof json !== \"string\") {\n                break;\n            }\n            // A string must always contain UTF-8 encoded or 7-bit ASCII.\n            // We validate with encodeURIComponent, which appears to be the fastest widely available option.\n            try {\n                encodeURIComponent(json);\n            }\n            catch (e) {\n                throw new Error(\"invalid UTF8\");\n            }\n            return json;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            if (json === null || json === \"\")\n                return new Uint8Array(0);\n            if (typeof json !== \"string\")\n                break;\n            return protoBase64.dec(json);\n    }\n    throw new Error();\n}\nfunction readEnum(type, json, ignoreUnknownFields) {\n    if (json === null) {\n        // proto3 requires 0 to be default value for all enums\n        return 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (typeof json) {\n        case \"number\":\n            if (Number.isInteger(json)) {\n                return json;\n            }\n            break;\n        case \"string\":\n            const value = type.findName(json);\n            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n            if (value || ignoreUnknownFields) {\n                return value === null || value === void 0 ? void 0 : value.no;\n            }\n            break;\n    }\n    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n}\nfunction writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {\n    var _a;\n    if (value === undefined) {\n        return value;\n    }\n    if (value === 0 && !emitIntrinsicDefault) {\n        // proto3 requires 0 to be default value for all enums\n        return undefined;\n    }\n    if (enumAsInteger) {\n        return value;\n    }\n    if (type.typeName == \"google.protobuf.NullValue\") {\n        return null;\n    }\n    const val = type.findNumber(value);\n    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\n}\nfunction writeScalar(type, value, emitIntrinsicDefault) {\n    if (value === undefined) {\n        return undefined;\n    }\n    switch (type) {\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n            assert(typeof value == \"number\");\n            return value != 0 || emitIntrinsicDefault ? value : undefined;\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.FLOAT:\n        // assertFloat32(value);\n        case ScalarType.DOUBLE: // eslint-disable-line no-fallthrough\n            assert(typeof value == \"number\");\n            if (Number.isNaN(value))\n                return \"NaN\";\n            if (value === Number.POSITIVE_INFINITY)\n                return \"Infinity\";\n            if (value === Number.NEGATIVE_INFINITY)\n                return \"-Infinity\";\n            return value !== 0 || emitIntrinsicDefault ? value : undefined;\n        // string:\n        case ScalarType.STRING:\n            assert(typeof value == \"string\");\n            return value.length > 0 || emitIntrinsicDefault ? value : undefined;\n        // bool:\n        case ScalarType.BOOL:\n            assert(typeof value == \"boolean\");\n            return value || emitIntrinsicDefault ? value : undefined;\n        // JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            assert(typeof value == \"bigint\" ||\n                typeof value == \"string\" ||\n                typeof value == \"number\");\n            // We use implicit conversion with `value != 0` to catch both 0n and \"0\"\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            return emitIntrinsicDefault || value != 0\n                ? value.toString(10)\n                : undefined;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            assert(value instanceof Uint8Array);\n            return emitIntrinsicDefault || value.byteLength > 0\n                ? protoBase64.enc(value)\n                : undefined;\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { wrapField } from \"./field-wrapper.js\";\nimport { assert } from \"./assert.js\";\nimport { makeJsonFormatCommon } from \"./json-format-common.js\";\n/* eslint-disable no-case-declarations, @typescript-eslint/restrict-plus-operands,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\nexport function makeJsonFormatProto3() {\n    return makeJsonFormatCommon((writeEnum, writeScalar) => {\n        return function writeField(field, value, options) {\n            if (field.kind == \"map\") {\n                const jsonObj = {};\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        for (const [entryKey, entryValue] of Object.entries(value)) {\n                            const val = writeScalar(field.V.T, entryValue, true);\n                            assert(val !== undefined);\n                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                        }\n                        break;\n                    case \"message\":\n                        for (const [entryKey, entryValue] of Object.entries(value)) {\n                            // JSON standard allows only (double quoted) string as property key\n                            jsonObj[entryKey.toString()] = entryValue.toJson(options);\n                        }\n                        break;\n                    case \"enum\":\n                        const enumType = field.V.T;\n                        for (const [entryKey, entryValue] of Object.entries(value)) {\n                            assert(entryValue === undefined || typeof entryValue == \"number\");\n                            const val = writeEnum(enumType, entryValue, true, options.enumAsInteger);\n                            assert(val !== undefined);\n                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                        }\n                        break;\n                }\n                return options.emitDefaultValues || Object.keys(jsonObj).length > 0\n                    ? jsonObj\n                    : undefined;\n            }\n            else if (field.repeated) {\n                const jsonArr = [];\n                switch (field.kind) {\n                    case \"scalar\":\n                        for (let i = 0; i < value.length; i++) {\n                            jsonArr.push(writeScalar(field.T, value[i], true));\n                        }\n                        break;\n                    case \"enum\":\n                        for (let i = 0; i < value.length; i++) {\n                            jsonArr.push(writeEnum(field.T, value[i], true, options.enumAsInteger));\n                        }\n                        break;\n                    case \"message\":\n                        for (let i = 0; i < value.length; i++) {\n                            jsonArr.push(wrapField(field.T, value[i]).toJson(options));\n                        }\n                        break;\n                }\n                return options.emitDefaultValues || jsonArr.length > 0\n                    ? jsonArr\n                    : undefined;\n            }\n            else {\n                switch (field.kind) {\n                    case \"scalar\":\n                        return writeScalar(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);\n                    case \"enum\":\n                        return writeEnum(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);\n                    case \"message\":\n                        return value !== undefined\n                            ? wrapField(field.T, value).toJson(options)\n                            : undefined;\n                }\n            }\n        };\n    });\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { setEnumType } from \"./enum.js\";\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../field.js\";\nimport { scalarEquals } from \"./scalars.js\";\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */\nexport function makeUtilCommon() {\n    return {\n        setEnumType,\n        initPartial(source, target) {\n            if (source === undefined) {\n                return;\n            }\n            const type = target.getType();\n            for (const member of type.fields.byMember()) {\n                const localName = member.localName, t = target, s = source;\n                if (s[localName] === undefined) {\n                    continue;\n                }\n                switch (member.kind) {\n                    case \"oneof\":\n                        const sk = s[localName].case;\n                        if (sk === undefined) {\n                            continue;\n                        }\n                        const sourceField = member.findField(sk);\n                        let val = s[localName].value;\n                        if (sourceField &&\n                            sourceField.kind == \"message\" &&\n                            !(val instanceof sourceField.T)) {\n                            val = new sourceField.T(val);\n                        }\n                        else if (sourceField &&\n                            sourceField.kind === \"scalar\" &&\n                            sourceField.T === ScalarType.BYTES) {\n                            val = toU8Arr(val);\n                        }\n                        t[localName] = { case: sk, value: val };\n                        break;\n                    case \"scalar\":\n                    case \"enum\":\n                        let copy = s[localName];\n                        if (member.T === ScalarType.BYTES) {\n                            copy = member.repeated\n                                ? copy.map(toU8Arr)\n                                : toU8Arr(copy);\n                        }\n                        t[localName] = copy;\n                        break;\n                    case \"map\":\n                        switch (member.V.kind) {\n                            case \"scalar\":\n                            case \"enum\":\n                                if (member.V.T === ScalarType.BYTES) {\n                                    for (const [k, v] of Object.entries(s[localName])) {\n                                        t[localName][k] = toU8Arr(v);\n                                    }\n                                }\n                                else {\n                                    Object.assign(t[localName], s[localName]);\n                                }\n                                break;\n                            case \"message\":\n                                const messageType = member.V.T;\n                                for (const k of Object.keys(s[localName])) {\n                                    let val = s[localName][k];\n                                    if (!messageType.fieldWrapper) {\n                                        // We only take partial input for messages that are not a wrapper type.\n                                        // For those messages, we recursively normalize the partial input.\n                                        val = new messageType(val);\n                                    }\n                                    t[localName][k] = val;\n                                }\n                                break;\n                        }\n                        break;\n                    case \"message\":\n                        const mt = member.T;\n                        if (member.repeated) {\n                            t[localName] = s[localName].map((val) => val instanceof mt ? val : new mt(val));\n                        }\n                        else if (s[localName] !== undefined) {\n                            const val = s[localName];\n                            if (mt.fieldWrapper) {\n                                if (\n                                // We can't use BytesValue.typeName as that will create a circular import\n                                mt.typeName === \"google.protobuf.BytesValue\") {\n                                    t[localName] = toU8Arr(val);\n                                }\n                                else {\n                                    t[localName] = val;\n                                }\n                            }\n                            else {\n                                t[localName] = val instanceof mt ? val : new mt(val);\n                            }\n                        }\n                        break;\n                }\n            }\n        },\n        equals(type, a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (!a || !b) {\n                return false;\n            }\n            return type.fields.byMember().every((m) => {\n                const va = a[m.localName];\n                const vb = b[m.localName];\n                if (m.repeated) {\n                    if (va.length !== vb.length) {\n                        return false;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\n                    switch (m.kind) {\n                        case \"message\":\n                            return va.every((a, i) => m.T.equals(a, vb[i]));\n                        case \"scalar\":\n                            return va.every((a, i) => scalarEquals(m.T, a, vb[i]));\n                        case \"enum\":\n                            return va.every((a, i) => scalarEquals(ScalarType.INT32, a, vb[i]));\n                    }\n                    throw new Error(`repeated cannot contain ${m.kind}`);\n                }\n                switch (m.kind) {\n                    case \"message\":\n                        return m.T.equals(va, vb);\n                    case \"enum\":\n                        return scalarEquals(ScalarType.INT32, va, vb);\n                    case \"scalar\":\n                        return scalarEquals(m.T, va, vb);\n                    case \"oneof\":\n                        if (va.case !== vb.case) {\n                            return false;\n                        }\n                        const s = m.findField(va.case);\n                        if (s === undefined) {\n                            return true;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\n                        switch (s.kind) {\n                            case \"message\":\n                                return s.T.equals(va.value, vb.value);\n                            case \"enum\":\n                                return scalarEquals(ScalarType.INT32, va.value, vb.value);\n                            case \"scalar\":\n                                return scalarEquals(s.T, va.value, vb.value);\n                        }\n                        throw new Error(`oneof cannot contain ${s.kind}`);\n                    case \"map\":\n                        const keys = Object.keys(va).concat(Object.keys(vb));\n                        switch (m.V.kind) {\n                            case \"message\":\n                                const messageType = m.V.T;\n                                return keys.every((k) => messageType.equals(va[k], vb[k]));\n                            case \"enum\":\n                                return keys.every((k) => scalarEquals(ScalarType.INT32, va[k], vb[k]));\n                            case \"scalar\":\n                                const scalarType = m.V.T;\n                                return keys.every((k) => scalarEquals(scalarType, va[k], vb[k]));\n                        }\n                        break;\n                }\n            });\n        },\n        clone(message) {\n            const type = message.getType(), target = new type(), any = target;\n            for (const member of type.fields.byMember()) {\n                const source = message[member.localName];\n                let copy;\n                if (member.repeated) {\n                    copy = source.map(cloneSingularField);\n                }\n                else if (member.kind == \"map\") {\n                    copy = any[member.localName];\n                    for (const [key, v] of Object.entries(source)) {\n                        copy[key] = cloneSingularField(v);\n                    }\n                }\n                else if (member.kind == \"oneof\") {\n                    const f = member.findField(source.case);\n                    copy = f\n                        ? { case: source.case, value: cloneSingularField(source.value) }\n                        : { case: undefined };\n                }\n                else {\n                    copy = cloneSingularField(source);\n                }\n                any[member.localName] = copy;\n            }\n            return target;\n        },\n    };\n}\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\nfunction cloneSingularField(value) {\n    if (value === undefined) {\n        return value;\n    }\n    if (value instanceof Message) {\n        return value.clone();\n    }\n    if (value instanceof Uint8Array) {\n        const c = new Uint8Array(value.byteLength);\n        c.set(value);\n        return c;\n    }\n    return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(input) {\n    return input instanceof Uint8Array ? input : new Uint8Array(input);\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport class InternalFieldList {\n    constructor(fields, normalizer) {\n        this._fields = fields;\n        this._normalizer = normalizer;\n    }\n    findJsonName(jsonName) {\n        if (!this.jsonNames) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.jsonName] = t[f.name] = f;\n            }\n            this.jsonNames = t;\n        }\n        return this.jsonNames[jsonName];\n    }\n    find(fieldNo) {\n        if (!this.numbers) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.no] = f;\n            }\n            this.numbers = t;\n        }\n        return this.numbers[fieldNo];\n    }\n    list() {\n        if (!this.all) {\n            this.all = this._normalizer(this._fields);\n        }\n        return this.all;\n    }\n    byNumber() {\n        if (!this.numbersAsc) {\n            this.numbersAsc = this.list()\n                .concat()\n                .sort((a, b) => a.no - b.no);\n        }\n        return this.numbersAsc;\n    }\n    byMember() {\n        if (!this.members) {\n            this.members = [];\n            const a = this.members;\n            let o;\n            for (const f of this.list()) {\n                if (f.oneof) {\n                    if (f.oneof !== o) {\n                        o = f.oneof;\n                        a.push(o);\n                    }\n                }\n                else {\n                    a.push(f);\n                }\n            }\n        }\n        return this.members;\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Returns the name of a protobuf element in generated code.\n *\n * Field names - including oneofs - are converted to lowerCamelCase. For\n * messages, enumerations and services, the package name is stripped from\n * the type name. For nested messages and enumerations, the names are joined\n * with an underscore. For methods, the first character is made lowercase.\n */\nexport function localName(desc) {\n    switch (desc.kind) {\n        case \"field\":\n            return localFieldName(desc.name, desc.oneof !== undefined);\n        case \"oneof\":\n            return localOneofName(desc.name);\n        case \"enum\":\n        case \"message\":\n        case \"service\": {\n            const pkg = desc.file.proto.package;\n            const offset = pkg === undefined ? 0 : pkg.length + 1;\n            const name = desc.typeName.substring(offset).replace(/\\./g, \"_\");\n            // For services, we only care about safe identifiers, not safe object properties,\n            // but we have shipped v1 with a bug that respected object properties, and we\n            // do not want to introduce a breaking change, so we continue to escape for\n            // safe object properties.\n            // See https://github.com/bufbuild/protobuf-es/pull/391\n            return safeObjectProperty(safeIdentifier(name));\n        }\n        case \"enum_value\": {\n            const sharedPrefix = desc.parent.sharedPrefix;\n            if (sharedPrefix === undefined) {\n                return desc.name;\n            }\n            const name = desc.name.substring(sharedPrefix.length);\n            return safeObjectProperty(name);\n        }\n        case \"rpc\": {\n            let name = desc.name;\n            if (name.length == 0) {\n                return name;\n            }\n            name = name[0].toLowerCase() + name.substring(1);\n            return safeObjectProperty(name);\n        }\n    }\n}\n/**\n * Returns the name of a field in generated code.\n */\nexport function localFieldName(protoName, inOneof) {\n    const name = protoCamelCase(protoName);\n    if (inOneof) {\n        // oneof member names are not properties, but values of the `case` property.\n        return name;\n    }\n    return safeObjectProperty(safeMessageProperty(name));\n}\n/**\n * Returns the name of a oneof group in generated code.\n */\nexport function localOneofName(protoName) {\n    return localFieldName(protoName, false);\n}\n/**\n * Returns the JSON name for a protobuf field, exactly like protoc does.\n */\nexport const fieldJsonName = protoCamelCase;\n/**\n * Finds a prefix shared by enum values, for example `MY_ENUM_` for\n * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.\n */\nexport function findEnumSharedPrefix(enumName, valueNames) {\n    const prefix = camelToSnakeCase(enumName) + \"_\";\n    for (const name of valueNames) {\n        if (!name.toLowerCase().startsWith(prefix)) {\n            return undefined;\n        }\n        const shortName = name.substring(prefix.length);\n        if (shortName.length == 0) {\n            return undefined;\n        }\n        if (/^\\d/.test(shortName)) {\n            // identifiers must not start with numbers\n            return undefined;\n        }\n    }\n    return prefix;\n}\n/**\n * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.\n * This is used to find shared prefixes in an enum.\n */\nfunction camelToSnakeCase(camel) {\n    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c)).toLowerCase();\n}\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */\nfunction protoCamelCase(snakeCase) {\n    let capNext = false;\n    const b = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let c = snakeCase.charAt(i);\n        switch (c) {\n            case \"_\":\n                capNext = true;\n                break;\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                b.push(c);\n                capNext = false;\n                break;\n            default:\n                if (capNext) {\n                    capNext = false;\n                    c = c.toUpperCase();\n                }\n                b.push(c);\n                break;\n        }\n    }\n    return b.join(\"\");\n}\n/**\n * Names that cannot be used for identifiers, such as class names,\n * but _can_ be used for object properties.\n */\nconst reservedIdentifiers = new Set([\n    // ECMAScript 2015 keywords\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"const\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"else\",\n    \"export\",\n    \"extends\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"instanceof\",\n    \"new\",\n    \"null\",\n    \"return\",\n    \"super\",\n    \"switch\",\n    \"this\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typeof\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    // ECMAScript 2015 future reserved keywords\n    \"enum\",\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    // Class name cannot be 'Object' when targeting ES5 with module CommonJS\n    \"Object\",\n    // TypeScript keywords that cannot be used for types (as opposed to variables)\n    \"bigint\",\n    \"number\",\n    \"boolean\",\n    \"string\",\n    \"object\",\n    // Identifiers reserved for the runtime, so we can generate legible code\n    \"globalThis\",\n    \"Uint8Array\",\n    \"Partial\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nconst reservedObjectProperties = new Set([\n    // names reserved by JavaScript\n    \"constructor\",\n    \"toString\",\n    \"toJSON\",\n    \"valueOf\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by the runtime.\n */\nconst reservedMessageProperties = new Set([\n    // names reserved by the runtime\n    \"getType\",\n    \"clone\",\n    \"equals\",\n    \"fromBinary\",\n    \"fromJson\",\n    \"fromJsonString\",\n    \"toBinary\",\n    \"toJson\",\n    \"toJsonString\",\n    // names reserved by the runtime for the future\n    \"toObject\",\n]);\nconst fallback = (name) => `${name}$`;\n/**\n * Will wrap names that are Object prototype properties or names reserved\n * for `Message`s.\n */\nconst safeMessageProperty = (name) => {\n    if (reservedMessageProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nexport const safeObjectProperty = (name) => {\n    if (reservedObjectProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that can be used for identifiers or class properties\n */\nexport const safeIdentifier = (name) => {\n    if (reservedIdentifiers.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { localOneofName } from \"./names.js\";\nimport { assert } from \"./assert.js\";\nexport class InternalOneofInfo {\n    constructor(name) {\n        this.kind = \"oneof\";\n        this.repeated = false;\n        this.packed = false;\n        this.opt = false;\n        this.default = undefined;\n        this.fields = [];\n        this.name = name;\n        this.localName = localOneofName(name);\n    }\n    addField(field) {\n        assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);\n        this.fields.push(field);\n    }\n    findField(localName) {\n        if (!this._lookup) {\n            this._lookup = Object.create(null);\n            for (let i = 0; i < this.fields.length; i++) {\n                this._lookup[this.fields[i].localName] = this.fields[i];\n            }\n        }\n        return this._lookup[localName];\n    }\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { makeProtoRuntime } from \"./private/proto-runtime.js\";\nimport { makeBinaryFormatProto3 } from \"./private/binary-format-proto3.js\";\nimport { makeJsonFormatProto3 } from \"./private/json-format-proto3.js\";\nimport { makeUtilCommon } from \"./private/util-common.js\";\nimport { InternalFieldList } from \"./private/field-list.js\";\nimport { scalarDefaultValue } from \"./private/scalars.js\";\nimport { LongType, ScalarType } from \"./field.js\";\nimport { InternalOneofInfo } from \"./private/field.js\";\nimport { localFieldName, fieldJsonName } from \"./private/names.js\";\n/**\n * Provides functionality for messages defined with the proto3 syntax.\n */\nexport const proto3 = makeProtoRuntime(\"proto3\", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), { newFieldList(fields) {\n        return new InternalFieldList(fields, normalizeFieldInfosProto3);\n    },\n    initFields(target) {\n        for (const member of target.getType().fields.byMember()) {\n            if (member.opt) {\n                continue;\n            }\n            const name = member.localName, t = target;\n            if (member.repeated) {\n                t[name] = [];\n                continue;\n            }\n            switch (member.kind) {\n                case \"oneof\":\n                    t[name] = { case: undefined };\n                    break;\n                case \"enum\":\n                    t[name] = 0;\n                    break;\n                case \"map\":\n                    t[name] = {};\n                    break;\n                case \"scalar\":\n                    t[name] = scalarDefaultValue(member.T, member.L); // eslint-disable-line @typescript-eslint/no-unsafe-assignment\n                    break;\n                case \"message\":\n                    // message fields are always optional in proto3\n                    break;\n            }\n        }\n    } }));\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument */\nfunction normalizeFieldInfosProto3(fieldInfos) {\n    var _a, _b, _c, _d;\n    const r = [];\n    let o;\n    for (const field of typeof fieldInfos == \"function\"\n        ? fieldInfos()\n        : fieldInfos) {\n        const f = field;\n        f.localName = localFieldName(field.name, field.oneof !== undefined);\n        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);\n        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\n        if (field.kind == \"scalar\") {\n            f.L = (_c = field.L) !== null && _c !== void 0 ? _c : LongType.BIGINT;\n        }\n        // From the proto3 language guide:\n        // > In proto3, repeated fields of scalar numeric types are packed by default.\n        // This information is incomplete - according to the conformance tests, BOOL\n        // and ENUM are packed by default as well. This means only STRING and BYTES\n        // are not packed by default, which makes sense because they are length-delimited.\n        f.packed =\n            (_d = field.packed) !== null && _d !== void 0 ? _d : (field.kind == \"enum\" ||\n                (field.kind == \"scalar\" &&\n                    field.T != ScalarType.BYTES &&\n                    field.T != ScalarType.STRING));\n        // We do not surface options at this time\n        // f.options = field.options ?? emptyReadonlyObject;\n        if (field.oneof !== undefined) {\n            const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\n            if (!o || o.name != ooname) {\n                o = new InternalOneofInfo(ooname);\n            }\n            f.oneof = o;\n            o.addField(f);\n        }\n        r.push(f);\n    }\n    return r;\n}\n","// Copyright 2021-2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * MethodKind represents the four method types that can be declared in\n * protobuf with the `stream` keyword:\n *\n * 1. Unary:           rpc (Input) returns (Output)\n * 2. ServerStreaming: rpc (Input) returns (stream Output)\n * 3. ClientStreaming: rpc (stream Input) returns (Output)\n * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)\n */\nexport var MethodKind;\n(function (MethodKind) {\n    MethodKind[MethodKind[\"Unary\"] = 0] = \"Unary\";\n    MethodKind[MethodKind[\"ServerStreaming\"] = 1] = \"ServerStreaming\";\n    MethodKind[MethodKind[\"ClientStreaming\"] = 2] = \"ClientStreaming\";\n    MethodKind[MethodKind[\"BiDiStreaming\"] = 3] = \"BiDiStreaming\";\n})(MethodKind || (MethodKind = {}));\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or just\n * idempotent, or neither? HTTP based RPC implementation may choose GET verb\n * for safe methods, and PUT verb for idempotent methods instead of the\n * default POST.\n *\n * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,\n * defined in the well-known type google/protobuf/descriptor.proto, but\n * drops UNKNOWN.\n */\nexport var MethodIdempotency;\n(function (MethodIdempotency) {\n    /**\n     * Idempotent, no side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"NoSideEffects\"] = 1] = \"NoSideEffects\";\n    /**\n     * Idempotent, but may have side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"Idempotent\"] = 2] = \"Idempotent\";\n})(MethodIdempotency || (MethodIdempotency = {}));\n","// @generated by protoc-gen-es v1.5.0 with parameter \"target=ts\"\n// @generated from file eliza.proto (package connectrpc.eliza.v1, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3 } from \"@bufbuild/protobuf\";\n\n/**\n * ! All requests should come with an appId and a key\n *\n * @generated from message connectrpc.eliza.v1.App\n */\nexport class App extends Message<App> {\n  /**\n   * @generated from field: int32 id = 1;\n   */\n  id = 0;\n\n  /**\n   * @generated from field: string name = 2;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: string description = 3;\n   */\n  description = \"\";\n\n  /**\n   * @generated from field: string permissions = 4;\n   */\n  permissions = \"\";\n\n  /**\n   * @generated from field: bool public = 5;\n   */\n  public = false;\n\n  /**\n   * @generated from field: string metadata = 6;\n   */\n  metadata = \"\";\n\n  constructor(data?: PartialMessage<App>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.App\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"description\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"permissions\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"public\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): App {\n    return new App().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): App {\n    return new App().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): App {\n    return new App().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: App | PlainMessage<App> | undefined, b: App | PlainMessage<App> | undefined): boolean {\n    return proto3.util.equals(App, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.Identity\n */\nexport class Identity extends Message<Identity> {\n  /**\n   * @generated from field: string slack = 1;\n   */\n  slack = \"\";\n\n  /**\n   * @generated from field: repeated connectrpc.eliza.v1.Instance inventory = 2;\n   */\n  inventory: Instance[] = [];\n\n  /**\n   * @generated from field: string metadata = 3;\n   */\n  metadata = \"\";\n\n  constructor(data?: PartialMessage<Identity>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.Identity\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"slack\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"inventory\", kind: \"message\", T: Instance, repeated: true },\n    { no: 3, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Identity {\n    return new Identity().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Identity {\n    return new Identity().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Identity {\n    return new Identity().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Identity | PlainMessage<Identity> | undefined, b: Identity | PlainMessage<Identity> | undefined): boolean {\n    return proto3.util.equals(Identity, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.Item\n */\nexport class Item extends Message<Item> {\n  /**\n   * @generated from field: string name = 1;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: string image = 2;\n   */\n  image = \"\";\n\n  /**\n   * @generated from field: string description = 3;\n   */\n  description = \"\";\n\n  /**\n   * @generated from field: string reaction = 4;\n   */\n  reaction = \"\";\n\n  /**\n   * @generated from field: bool commodity = 5;\n   */\n  commodity = false;\n\n  /**\n   * @generated from field: bool tradable = 6;\n   */\n  tradable = false;\n\n  /**\n   * @generated from field: bool public = 7;\n   */\n  public = false;\n\n  /**\n   * @generated from field: string metadata = 8;\n   */\n  metadata = \"\";\n\n  constructor(data?: PartialMessage<Item>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.Item\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"image\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"description\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"reaction\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"commodity\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"tradable\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"public\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 8, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {\n    return new Item().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {\n    return new Item().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {\n    return new Item().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean {\n    return proto3.util.equals(Item, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.Instance\n */\nexport class Instance extends Message<Instance> {\n  /**\n   * @generated from field: int32 id = 1;\n   */\n  id = 0;\n\n  /**\n   * @generated from field: string itemId = 2;\n   */\n  itemId = \"\";\n\n  /**\n   * @generated from field: string identityId = 3;\n   */\n  identityId = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.Item item = 4;\n   */\n  item?: Item;\n\n  constructor(data?: PartialMessage<Instance>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.Instance\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"itemId\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"identityId\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"item\", kind: \"message\", T: Item },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instance {\n    return new Instance().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instance {\n    return new Instance().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instance {\n    return new Instance().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Instance | PlainMessage<Instance> | undefined, b: Instance | PlainMessage<Instance> | undefined): boolean {\n    return proto3.util.equals(Instance, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.RecipeResponse\n */\nexport class RecipeResponse extends Message<RecipeResponse> {\n  /**\n   * @generated from field: int32 id = 1;\n   */\n  id = 0;\n\n  constructor(data?: PartialMessage<RecipeResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.RecipeResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecipeResponse {\n    return new RecipeResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecipeResponse {\n    return new RecipeResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecipeResponse {\n    return new RecipeResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RecipeResponse | PlainMessage<RecipeResponse> | undefined, b: RecipeResponse | PlainMessage<RecipeResponse> | undefined): boolean {\n    return proto3.util.equals(RecipeResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.TradeResponse\n */\nexport class TradeResponse extends Message<TradeResponse> {\n  /**\n   * @generated from field: int32 id = 1;\n   */\n  id = 0;\n\n  /**\n   * @generated from field: string initiatorIdentityId = 2;\n   */\n  initiatorIdentityId = \"\";\n\n  /**\n   * @generated from field: string receiverIdentityId = 3;\n   */\n  receiverIdentityId = \"\";\n\n  /**\n   * @generated from field: bool public = 4;\n   */\n  public = false;\n\n  /**\n   * @generated from field: bool closed = 5;\n   */\n  closed = false;\n\n  constructor(data?: PartialMessage<TradeResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.TradeResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"initiatorIdentityId\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"receiverIdentityId\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"public\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"closed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TradeResponse {\n    return new TradeResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TradeResponse {\n    return new TradeResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TradeResponse {\n    return new TradeResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TradeResponse | PlainMessage<TradeResponse> | undefined, b: TradeResponse | PlainMessage<TradeResponse> | undefined): boolean {\n    return proto3.util.equals(TradeResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateInstanceRequest\n */\nexport class CreateInstanceRequest extends Message<CreateInstanceRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: string itemId = 3;\n   */\n  itemId = \"\";\n\n  /**\n   * @generated from field: string identityId = 4;\n   */\n  identityId = \"\";\n\n  /**\n   * @generated from field: int32 quantity = 5;\n   */\n  quantity = 0;\n\n  /**\n   * @generated from field: string metadata = 6;\n   */\n  metadata = \"\";\n\n  /**\n   * @generated from field: string note = 7;\n   */\n  note = \"\";\n\n  constructor(data?: PartialMessage<CreateInstanceRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateInstanceRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"itemId\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"identityId\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"quantity\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 6, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"note\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest {\n    return new CreateInstanceRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest {\n    return new CreateInstanceRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest {\n    return new CreateInstanceRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined, b: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined): boolean {\n    return proto3.util.equals(CreateInstanceRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateInstanceResponse\n */\nexport class CreateInstanceResponse extends Message<CreateInstanceResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.Instance instance = 2;\n   */\n  instance?: Instance;\n\n  constructor(data?: PartialMessage<CreateInstanceResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateInstanceResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"instance\", kind: \"message\", T: Instance },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceResponse {\n    return new CreateInstanceResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceResponse {\n    return new CreateInstanceResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceResponse {\n    return new CreateInstanceResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined, b: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined): boolean {\n    return proto3.util.equals(CreateInstanceResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateAppRequest\n */\nexport class CreateAppRequest extends Message<CreateAppRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: string name = 3;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: string description = 4;\n   */\n  description = \"\";\n\n  /**\n   * @generated from field: int32 permissions = 5;\n   */\n  permissions = 0;\n\n  /**\n   * @generated from field: bool public = 6;\n   */\n  public = false;\n\n  /**\n   * @generated from field: string metadata = 7;\n   */\n  metadata = \"\";\n\n  constructor(data?: PartialMessage<CreateAppRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateAppRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"description\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"permissions\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 6, name: \"public\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppRequest {\n    return new CreateAppRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppRequest {\n    return new CreateAppRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppRequest {\n    return new CreateAppRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined, b: CreateAppRequest | PlainMessage<CreateAppRequest> | undefined): boolean {\n    return proto3.util.equals(CreateAppRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateAppResponse\n */\nexport class CreateAppResponse extends Message<CreateAppResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.App app = 2;\n   */\n  app?: App;\n\n  constructor(data?: PartialMessage<CreateAppResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateAppResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"app\", kind: \"message\", T: App },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAppResponse {\n    return new CreateAppResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAppResponse {\n    return new CreateAppResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAppResponse {\n    return new CreateAppResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined, b: CreateAppResponse | PlainMessage<CreateAppResponse> | undefined): boolean {\n    return proto3.util.equals(CreateAppResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateItemRequest\n */\nexport class CreateItemRequest extends Message<CreateItemRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.Item item = 3;\n   */\n  item?: Item;\n\n  constructor(data?: PartialMessage<CreateItemRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateItemRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"item\", kind: \"message\", T: Item },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateItemRequest {\n    return new CreateItemRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateItemRequest {\n    return new CreateItemRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateItemRequest {\n    return new CreateItemRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateItemRequest | PlainMessage<CreateItemRequest> | undefined, b: CreateItemRequest | PlainMessage<CreateItemRequest> | undefined): boolean {\n    return proto3.util.equals(CreateItemRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateItemResponse\n */\nexport class CreateItemResponse extends Message<CreateItemResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.Item item = 2;\n   */\n  item?: Item;\n\n  constructor(data?: PartialMessage<CreateItemResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateItemResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"item\", kind: \"message\", T: Item },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateItemResponse {\n    return new CreateItemResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateItemResponse {\n    return new CreateItemResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateItemResponse {\n    return new CreateItemResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateItemResponse | PlainMessage<CreateItemResponse> | undefined, b: CreateItemResponse | PlainMessage<CreateItemResponse> | undefined): boolean {\n    return proto3.util.equals(CreateItemResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateRecipeRequest\n */\nexport class CreateRecipeRequest extends Message<CreateRecipeRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<CreateRecipeRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateRecipeRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecipeRequest {\n    return new CreateRecipeRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecipeRequest {\n    return new CreateRecipeRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecipeRequest {\n    return new CreateRecipeRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateRecipeRequest | PlainMessage<CreateRecipeRequest> | undefined, b: CreateRecipeRequest | PlainMessage<CreateRecipeRequest> | undefined): boolean {\n    return proto3.util.equals(CreateRecipeRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateRecipeResponse\n */\nexport class CreateRecipeResponse extends Message<CreateRecipeResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<CreateRecipeResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateRecipeResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecipeResponse {\n    return new CreateRecipeResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecipeResponse {\n    return new CreateRecipeResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecipeResponse {\n    return new CreateRecipeResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateRecipeResponse | PlainMessage<CreateRecipeResponse> | undefined, b: CreateRecipeResponse | PlainMessage<CreateRecipeResponse> | undefined): boolean {\n    return proto3.util.equals(CreateRecipeResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateTradeRequest\n */\nexport class CreateTradeRequest extends Message<CreateTradeRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<CreateTradeRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateTradeRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTradeRequest {\n    return new CreateTradeRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTradeRequest {\n    return new CreateTradeRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTradeRequest {\n    return new CreateTradeRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateTradeRequest | PlainMessage<CreateTradeRequest> | undefined, b: CreateTradeRequest | PlainMessage<CreateTradeRequest> | undefined): boolean {\n    return proto3.util.equals(CreateTradeRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CreateTradeResponse\n */\nexport class CreateTradeResponse extends Message<CreateTradeResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<CreateTradeResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CreateTradeResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTradeResponse {\n    return new CreateTradeResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTradeResponse {\n    return new CreateTradeResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTradeResponse {\n    return new CreateTradeResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateTradeResponse | PlainMessage<CreateTradeResponse> | undefined, b: CreateTradeResponse | PlainMessage<CreateTradeResponse> | undefined): boolean {\n    return proto3.util.equals(CreateTradeResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadIdentityRequest\n */\nexport class ReadIdentityRequest extends Message<ReadIdentityRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: string identityId = 3;\n   */\n  identityId = \"\";\n\n  constructor(data?: PartialMessage<ReadIdentityRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadIdentityRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"identityId\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadIdentityRequest {\n    return new ReadIdentityRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadIdentityRequest {\n    return new ReadIdentityRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadIdentityRequest {\n    return new ReadIdentityRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadIdentityRequest | PlainMessage<ReadIdentityRequest> | undefined, b: ReadIdentityRequest | PlainMessage<ReadIdentityRequest> | undefined): boolean {\n    return proto3.util.equals(ReadIdentityRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadIdentityResponse\n */\nexport class ReadIdentityResponse extends Message<ReadIdentityResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.Identity identity = 2;\n   */\n  identity?: Identity;\n\n  constructor(data?: PartialMessage<ReadIdentityResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadIdentityResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"identity\", kind: \"message\", T: Identity },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadIdentityResponse {\n    return new ReadIdentityResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadIdentityResponse {\n    return new ReadIdentityResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadIdentityResponse {\n    return new ReadIdentityResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadIdentityResponse | PlainMessage<ReadIdentityResponse> | undefined, b: ReadIdentityResponse | PlainMessage<ReadIdentityResponse> | undefined): boolean {\n    return proto3.util.equals(ReadIdentityResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadInventoryRequest\n */\nexport class ReadInventoryRequest extends Message<ReadInventoryRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: string identityId = 3;\n   */\n  identityId = \"\";\n\n  constructor(data?: PartialMessage<ReadInventoryRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadInventoryRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"identityId\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadInventoryRequest {\n    return new ReadInventoryRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadInventoryRequest {\n    return new ReadInventoryRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadInventoryRequest {\n    return new ReadInventoryRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadInventoryRequest | PlainMessage<ReadInventoryRequest> | undefined, b: ReadInventoryRequest | PlainMessage<ReadInventoryRequest> | undefined): boolean {\n    return proto3.util.equals(ReadInventoryRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadInventoryResponse\n */\nexport class ReadInventoryResponse extends Message<ReadInventoryResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: repeated connectrpc.eliza.v1.Instance inventory = 2;\n   */\n  inventory: Instance[] = [];\n\n  constructor(data?: PartialMessage<ReadInventoryResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadInventoryResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"inventory\", kind: \"message\", T: Instance, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadInventoryResponse {\n    return new ReadInventoryResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadInventoryResponse {\n    return new ReadInventoryResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadInventoryResponse {\n    return new ReadInventoryResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadInventoryResponse | PlainMessage<ReadInventoryResponse> | undefined, b: ReadInventoryResponse | PlainMessage<ReadInventoryResponse> | undefined): boolean {\n    return proto3.util.equals(ReadInventoryResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadItemRequest\n */\nexport class ReadItemRequest extends Message<ReadItemRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: string query = 3;\n   */\n  query = \"\";\n\n  constructor(data?: PartialMessage<ReadItemRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadItemRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"query\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadItemRequest {\n    return new ReadItemRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadItemRequest {\n    return new ReadItemRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadItemRequest {\n    return new ReadItemRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadItemRequest | PlainMessage<ReadItemRequest> | undefined, b: ReadItemRequest | PlainMessage<ReadItemRequest> | undefined): boolean {\n    return proto3.util.equals(ReadItemRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadItemResponse\n */\nexport class ReadItemResponse extends Message<ReadItemResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: repeated connectrpc.eliza.v1.Item items = 2;\n   */\n  items: Item[] = [];\n\n  constructor(data?: PartialMessage<ReadItemResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadItemResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"items\", kind: \"message\", T: Item, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadItemResponse {\n    return new ReadItemResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadItemResponse {\n    return new ReadItemResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadItemResponse {\n    return new ReadItemResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadItemResponse | PlainMessage<ReadItemResponse> | undefined, b: ReadItemResponse | PlainMessage<ReadItemResponse> | undefined): boolean {\n    return proto3.util.equals(ReadItemResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadInstanceRequest\n */\nexport class ReadInstanceRequest extends Message<ReadInstanceRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: int32 instanceId = 3;\n   */\n  instanceId = 0;\n\n  constructor(data?: PartialMessage<ReadInstanceRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadInstanceRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"instanceId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadInstanceRequest {\n    return new ReadInstanceRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadInstanceRequest {\n    return new ReadInstanceRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadInstanceRequest {\n    return new ReadInstanceRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadInstanceRequest | PlainMessage<ReadInstanceRequest> | undefined, b: ReadInstanceRequest | PlainMessage<ReadInstanceRequest> | undefined): boolean {\n    return proto3.util.equals(ReadInstanceRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadInstanceResponse\n */\nexport class ReadInstanceResponse extends Message<ReadInstanceResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.Instance instance = 2;\n   */\n  instance?: Instance;\n\n  constructor(data?: PartialMessage<ReadInstanceResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadInstanceResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"instance\", kind: \"message\", T: Instance },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadInstanceResponse {\n    return new ReadInstanceResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadInstanceResponse {\n    return new ReadInstanceResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadInstanceResponse {\n    return new ReadInstanceResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadInstanceResponse | PlainMessage<ReadInstanceResponse> | undefined, b: ReadInstanceResponse | PlainMessage<ReadInstanceResponse> | undefined): boolean {\n    return proto3.util.equals(ReadInstanceResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadAppRequest\n */\nexport class ReadAppRequest extends Message<ReadAppRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: int32 optAppId = 3;\n   */\n  optAppId = 0;\n\n  constructor(data?: PartialMessage<ReadAppRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadAppRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"optAppId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadAppRequest {\n    return new ReadAppRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadAppRequest {\n    return new ReadAppRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadAppRequest {\n    return new ReadAppRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadAppRequest | PlainMessage<ReadAppRequest> | undefined, b: ReadAppRequest | PlainMessage<ReadAppRequest> | undefined): boolean {\n    return proto3.util.equals(ReadAppRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadAppResponse\n */\nexport class ReadAppResponse extends Message<ReadAppResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.App app = 2;\n   */\n  app?: App;\n\n  constructor(data?: PartialMessage<ReadAppResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadAppResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"app\", kind: \"message\", T: App },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadAppResponse {\n    return new ReadAppResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadAppResponse {\n    return new ReadAppResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadAppResponse {\n    return new ReadAppResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadAppResponse | PlainMessage<ReadAppResponse> | undefined, b: ReadAppResponse | PlainMessage<ReadAppResponse> | undefined): boolean {\n    return proto3.util.equals(ReadAppResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadTradeRequest\n */\nexport class ReadTradeRequest extends Message<ReadTradeRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<ReadTradeRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadTradeRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadTradeRequest {\n    return new ReadTradeRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadTradeRequest {\n    return new ReadTradeRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadTradeRequest {\n    return new ReadTradeRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadTradeRequest | PlainMessage<ReadTradeRequest> | undefined, b: ReadTradeRequest | PlainMessage<ReadTradeRequest> | undefined): boolean {\n    return proto3.util.equals(ReadTradeRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadTradeResponse\n */\nexport class ReadTradeResponse extends Message<ReadTradeResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<ReadTradeResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadTradeResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadTradeResponse {\n    return new ReadTradeResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadTradeResponse {\n    return new ReadTradeResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadTradeResponse {\n    return new ReadTradeResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadTradeResponse | PlainMessage<ReadTradeResponse> | undefined, b: ReadTradeResponse | PlainMessage<ReadTradeResponse> | undefined): boolean {\n    return proto3.util.equals(ReadTradeResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadRecipeRequest\n */\nexport class ReadRecipeRequest extends Message<ReadRecipeRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<ReadRecipeRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadRecipeRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadRecipeRequest {\n    return new ReadRecipeRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadRecipeRequest {\n    return new ReadRecipeRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadRecipeRequest {\n    return new ReadRecipeRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadRecipeRequest | PlainMessage<ReadRecipeRequest> | undefined, b: ReadRecipeRequest | PlainMessage<ReadRecipeRequest> | undefined): boolean {\n    return proto3.util.equals(ReadRecipeRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.ReadRecipeResponse\n */\nexport class ReadRecipeResponse extends Message<ReadRecipeResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<ReadRecipeResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.ReadRecipeResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadRecipeResponse {\n    return new ReadRecipeResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadRecipeResponse {\n    return new ReadRecipeResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadRecipeResponse {\n    return new ReadRecipeResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReadRecipeResponse | PlainMessage<ReadRecipeResponse> | undefined, b: ReadRecipeResponse | PlainMessage<ReadRecipeResponse> | undefined): boolean {\n    return proto3.util.equals(ReadRecipeResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateIdentityMetadataRequest\n */\nexport class UpdateIdentityMetadataRequest extends Message<UpdateIdentityMetadataRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<UpdateIdentityMetadataRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateIdentityMetadataRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIdentityMetadataRequest {\n    return new UpdateIdentityMetadataRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIdentityMetadataRequest {\n    return new UpdateIdentityMetadataRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIdentityMetadataRequest {\n    return new UpdateIdentityMetadataRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateIdentityMetadataRequest | PlainMessage<UpdateIdentityMetadataRequest> | undefined, b: UpdateIdentityMetadataRequest | PlainMessage<UpdateIdentityMetadataRequest> | undefined): boolean {\n    return proto3.util.equals(UpdateIdentityMetadataRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateIdentityMetadataResponse\n */\nexport class UpdateIdentityMetadataResponse extends Message<UpdateIdentityMetadataResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<UpdateIdentityMetadataResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateIdentityMetadataResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIdentityMetadataResponse {\n    return new UpdateIdentityMetadataResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIdentityMetadataResponse {\n    return new UpdateIdentityMetadataResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIdentityMetadataResponse {\n    return new UpdateIdentityMetadataResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateIdentityMetadataResponse | PlainMessage<UpdateIdentityMetadataResponse> | undefined, b: UpdateIdentityMetadataResponse | PlainMessage<UpdateIdentityMetadataResponse> | undefined): boolean {\n    return proto3.util.equals(UpdateIdentityMetadataResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateInstanceRequest\n */\nexport class UpdateInstanceRequest extends Message<UpdateInstanceRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<UpdateInstanceRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateInstanceRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateInstanceRequest {\n    return new UpdateInstanceRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateInstanceRequest {\n    return new UpdateInstanceRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateInstanceRequest {\n    return new UpdateInstanceRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateInstanceRequest | PlainMessage<UpdateInstanceRequest> | undefined, b: UpdateInstanceRequest | PlainMessage<UpdateInstanceRequest> | undefined): boolean {\n    return proto3.util.equals(UpdateInstanceRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateInstanceResponse\n */\nexport class UpdateInstanceResponse extends Message<UpdateInstanceResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<UpdateInstanceResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateInstanceResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateInstanceResponse {\n    return new UpdateInstanceResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateInstanceResponse {\n    return new UpdateInstanceResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateInstanceResponse {\n    return new UpdateInstanceResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateInstanceResponse | PlainMessage<UpdateInstanceResponse> | undefined, b: UpdateInstanceResponse | PlainMessage<UpdateInstanceResponse> | undefined): boolean {\n    return proto3.util.equals(UpdateInstanceResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateItemRequest\n */\nexport class UpdateItemRequest extends Message<UpdateItemRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: string itemId = 3;\n   */\n  itemId = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.Item new = 4;\n   */\n  new?: Item;\n\n  constructor(data?: PartialMessage<UpdateItemRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateItemRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"itemId\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"new\", kind: \"message\", T: Item },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItemRequest {\n    return new UpdateItemRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItemRequest {\n    return new UpdateItemRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateItemRequest {\n    return new UpdateItemRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateItemRequest | PlainMessage<UpdateItemRequest> | undefined, b: UpdateItemRequest | PlainMessage<UpdateItemRequest> | undefined): boolean {\n    return proto3.util.equals(UpdateItemRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateItemResponse\n */\nexport class UpdateItemResponse extends Message<UpdateItemResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.Item item = 2;\n   */\n  item?: Item;\n\n  constructor(data?: PartialMessage<UpdateItemResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateItemResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"item\", kind: \"message\", T: Item },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItemResponse {\n    return new UpdateItemResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItemResponse {\n    return new UpdateItemResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateItemResponse {\n    return new UpdateItemResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateItemResponse | PlainMessage<UpdateItemResponse> | undefined, b: UpdateItemResponse | PlainMessage<UpdateItemResponse> | undefined): boolean {\n    return proto3.util.equals(UpdateItemResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateAppRequest\n */\nexport class UpdateAppRequest extends Message<UpdateAppRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: int32 optAppId = 3;\n   */\n  optAppId = 0;\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.App new = 4;\n   */\n  new?: App;\n\n  constructor(data?: PartialMessage<UpdateAppRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateAppRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"optAppId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 4, name: \"new\", kind: \"message\", T: App },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppRequest {\n    return new UpdateAppRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppRequest {\n    return new UpdateAppRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppRequest {\n    return new UpdateAppRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined, b: UpdateAppRequest | PlainMessage<UpdateAppRequest> | undefined): boolean {\n    return proto3.util.equals(UpdateAppRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateAppResponse\n */\nexport class UpdateAppResponse extends Message<UpdateAppResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.App app = 2;\n   */\n  app?: App;\n\n  constructor(data?: PartialMessage<UpdateAppResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateAppResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"app\", kind: \"message\", T: App },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAppResponse {\n    return new UpdateAppResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAppResponse {\n    return new UpdateAppResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAppResponse {\n    return new UpdateAppResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined, b: UpdateAppResponse | PlainMessage<UpdateAppResponse> | undefined): boolean {\n    return proto3.util.equals(UpdateAppResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateTradeRequest\n */\nexport class UpdateTradeRequest extends Message<UpdateTradeRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<UpdateTradeRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateTradeRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTradeRequest {\n    return new UpdateTradeRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTradeRequest {\n    return new UpdateTradeRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTradeRequest {\n    return new UpdateTradeRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateTradeRequest | PlainMessage<UpdateTradeRequest> | undefined, b: UpdateTradeRequest | PlainMessage<UpdateTradeRequest> | undefined): boolean {\n    return proto3.util.equals(UpdateTradeRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateTradeResponse\n */\nexport class UpdateTradeResponse extends Message<UpdateTradeResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<UpdateTradeResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateTradeResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTradeResponse {\n    return new UpdateTradeResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTradeResponse {\n    return new UpdateTradeResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTradeResponse {\n    return new UpdateTradeResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateTradeResponse | PlainMessage<UpdateTradeResponse> | undefined, b: UpdateTradeResponse | PlainMessage<UpdateTradeResponse> | undefined): boolean {\n    return proto3.util.equals(UpdateTradeResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateRecipeRequest\n */\nexport class UpdateRecipeRequest extends Message<UpdateRecipeRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<UpdateRecipeRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateRecipeRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecipeRequest {\n    return new UpdateRecipeRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecipeRequest {\n    return new UpdateRecipeRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecipeRequest {\n    return new UpdateRecipeRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateRecipeRequest | PlainMessage<UpdateRecipeRequest> | undefined, b: UpdateRecipeRequest | PlainMessage<UpdateRecipeRequest> | undefined): boolean {\n    return proto3.util.equals(UpdateRecipeRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.UpdateRecipeResponse\n */\nexport class UpdateRecipeResponse extends Message<UpdateRecipeResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<UpdateRecipeResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.UpdateRecipeResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecipeResponse {\n    return new UpdateRecipeResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecipeResponse {\n    return new UpdateRecipeResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecipeResponse {\n    return new UpdateRecipeResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateRecipeResponse | PlainMessage<UpdateRecipeResponse> | undefined, b: UpdateRecipeResponse | PlainMessage<UpdateRecipeResponse> | undefined): boolean {\n    return proto3.util.equals(UpdateRecipeResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.DeleteAppRequest\n */\nexport class DeleteAppRequest extends Message<DeleteAppRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: int32 deleteAppId = 3;\n   */\n  deleteAppId = 0;\n\n  constructor(data?: PartialMessage<DeleteAppRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.DeleteAppRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"deleteAppId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppRequest {\n    return new DeleteAppRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppRequest {\n    return new DeleteAppRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppRequest {\n    return new DeleteAppRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined, b: DeleteAppRequest | PlainMessage<DeleteAppRequest> | undefined): boolean {\n    return proto3.util.equals(DeleteAppRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.DeleteAppResponse\n */\nexport class DeleteAppResponse extends Message<DeleteAppResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<DeleteAppResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.DeleteAppResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAppResponse {\n    return new DeleteAppResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAppResponse {\n    return new DeleteAppResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAppResponse {\n    return new DeleteAppResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined, b: DeleteAppResponse | PlainMessage<DeleteAppResponse> | undefined): boolean {\n    return proto3.util.equals(DeleteAppResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.DeleteInstanceRequest\n */\nexport class DeleteInstanceRequest extends Message<DeleteInstanceRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  /**\n   * @generated from field: int32 instanceId = 3;\n   */\n  instanceId = 0;\n\n  constructor(data?: PartialMessage<DeleteInstanceRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.DeleteInstanceRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"instanceId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceRequest {\n    return new DeleteInstanceRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {\n    return new DeleteInstanceRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {\n    return new DeleteInstanceRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined, b: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined): boolean {\n    return proto3.util.equals(DeleteInstanceRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.DeleteInstanceResponse\n */\nexport class DeleteInstanceResponse extends Message<DeleteInstanceResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  /**\n   * @generated from field: connectrpc.eliza.v1.Instance deletedInstance = 2;\n   */\n  deletedInstance?: Instance;\n\n  constructor(data?: PartialMessage<DeleteInstanceResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.DeleteInstanceResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"deletedInstance\", kind: \"message\", T: Instance },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceResponse {\n    return new DeleteInstanceResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {\n    return new DeleteInstanceResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {\n    return new DeleteInstanceResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined, b: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined): boolean {\n    return proto3.util.equals(DeleteInstanceResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CloseTradeRequest\n */\nexport class CloseTradeRequest extends Message<CloseTradeRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<CloseTradeRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CloseTradeRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseTradeRequest {\n    return new CloseTradeRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseTradeRequest {\n    return new CloseTradeRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseTradeRequest {\n    return new CloseTradeRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CloseTradeRequest | PlainMessage<CloseTradeRequest> | undefined, b: CloseTradeRequest | PlainMessage<CloseTradeRequest> | undefined): boolean {\n    return proto3.util.equals(CloseTradeRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.CloseTradeResponse\n */\nexport class CloseTradeResponse extends Message<CloseTradeResponse> {\n  /**\n   * @generated from field: string response = 1;\n   */\n  response = \"\";\n\n  constructor(data?: PartialMessage<CloseTradeResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.CloseTradeResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"response\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseTradeResponse {\n    return new CloseTradeResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseTradeResponse {\n    return new CloseTradeResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseTradeResponse {\n    return new CloseTradeResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CloseTradeResponse | PlainMessage<CloseTradeResponse> | undefined, b: CloseTradeResponse | PlainMessage<CloseTradeResponse> | undefined): boolean {\n    return proto3.util.equals(CloseTradeResponse, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.VerifyKeyRequest\n */\nexport class VerifyKeyRequest extends Message<VerifyKeyRequest> {\n  /**\n   * @generated from field: int32 appId = 1;\n   */\n  appId = 0;\n\n  /**\n   * @generated from field: string key = 2;\n   */\n  key = \"\";\n\n  constructor(data?: PartialMessage<VerifyKeyRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.VerifyKeyRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"appId\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyKeyRequest {\n    return new VerifyKeyRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyKeyRequest {\n    return new VerifyKeyRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyKeyRequest {\n    return new VerifyKeyRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: VerifyKeyRequest | PlainMessage<VerifyKeyRequest> | undefined, b: VerifyKeyRequest | PlainMessage<VerifyKeyRequest> | undefined): boolean {\n    return proto3.util.equals(VerifyKeyRequest, a, b);\n  }\n}\n\n/**\n * @generated from message connectrpc.eliza.v1.VerifyKeyResponse\n */\nexport class VerifyKeyResponse extends Message<VerifyKeyResponse> {\n  /**\n   * @generated from field: bool valid = 1;\n   */\n  valid = false;\n\n  constructor(data?: PartialMessage<VerifyKeyResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"connectrpc.eliza.v1.VerifyKeyResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"valid\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyKeyResponse {\n    return new VerifyKeyResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyKeyResponse {\n    return new VerifyKeyResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyKeyResponse {\n    return new VerifyKeyResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: VerifyKeyResponse | PlainMessage<VerifyKeyResponse> | undefined, b: VerifyKeyResponse | PlainMessage<VerifyKeyResponse> | undefined): boolean {\n    return proto3.util.equals(VerifyKeyResponse, a, b);\n  }\n}\n\n","// @generated by protoc-gen-connect-es v1.1.4 with parameter \"target=ts\"\n// @generated from file eliza.proto (package connectrpc.eliza.v1, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { CloseTradeRequest, CloseTradeResponse, CreateAppRequest, CreateAppResponse, CreateInstanceRequest, CreateInstanceResponse, CreateItemRequest, CreateItemResponse, CreateRecipeRequest, CreateRecipeResponse, CreateTradeRequest, CreateTradeResponse, DeleteAppRequest, DeleteAppResponse, DeleteInstanceRequest, DeleteInstanceResponse, ReadAppRequest, ReadAppResponse, ReadIdentityRequest, ReadIdentityResponse, ReadInstanceRequest, ReadInstanceResponse, ReadInventoryRequest, ReadInventoryResponse, ReadItemRequest, ReadItemResponse, ReadRecipeRequest, ReadRecipeResponse, ReadTradeRequest, ReadTradeResponse, UpdateAppRequest, UpdateAppResponse, UpdateIdentityMetadataRequest, UpdateIdentityMetadataResponse, UpdateInstanceRequest, UpdateInstanceResponse, UpdateItemRequest, UpdateItemResponse, UpdateRecipeRequest, UpdateRecipeResponse, UpdateTradeRequest, UpdateTradeResponse, VerifyKeyRequest, VerifyKeyResponse } from \"./eliza_pb.js\";\nimport { MethodKind } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from service connectrpc.eliza.v1.ElizaService\n */\nexport const ElizaService = {\n  typeName: \"connectrpc.eliza.v1.ElizaService\",\n  methods: {\n    /**\n     * Response to request\n     *\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.CreateApp\n     */\n    createApp: {\n      name: \"CreateApp\",\n      I: CreateAppRequest,\n      O: CreateAppResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.CreateInstance\n     */\n    createInstance: {\n      name: \"CreateInstance\",\n      I: CreateInstanceRequest,\n      O: CreateInstanceResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.CreateItem\n     */\n    createItem: {\n      name: \"CreateItem\",\n      I: CreateItemRequest,\n      O: CreateItemResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.CreateRecipe\n     */\n    createRecipe: {\n      name: \"CreateRecipe\",\n      I: CreateRecipeRequest,\n      O: CreateRecipeResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.CreateTrade\n     */\n    createTrade: {\n      name: \"CreateTrade\",\n      I: CreateTradeRequest,\n      O: CreateTradeResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.ReadIdentity\n     */\n    readIdentity: {\n      name: \"ReadIdentity\",\n      I: ReadIdentityRequest,\n      O: ReadIdentityResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.ReadInventory\n     */\n    readInventory: {\n      name: \"ReadInventory\",\n      I: ReadInventoryRequest,\n      O: ReadInventoryResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.ReadItem\n     */\n    readItem: {\n      name: \"ReadItem\",\n      I: ReadItemRequest,\n      O: ReadItemResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.ReadInstance\n     */\n    readInstance: {\n      name: \"ReadInstance\",\n      I: ReadInstanceRequest,\n      O: ReadInstanceResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.ReadApp\n     */\n    readApp: {\n      name: \"ReadApp\",\n      I: ReadAppRequest,\n      O: ReadAppResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.ReadTrade\n     */\n    readTrade: {\n      name: \"ReadTrade\",\n      I: ReadTradeRequest,\n      O: ReadTradeResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.ReadRecipe\n     */\n    readRecipe: {\n      name: \"ReadRecipe\",\n      I: ReadRecipeRequest,\n      O: ReadRecipeResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.UpdateIdentityMetadata\n     */\n    updateIdentityMetadata: {\n      name: \"UpdateIdentityMetadata\",\n      I: UpdateIdentityMetadataRequest,\n      O: UpdateIdentityMetadataResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.UpdateInstance\n     */\n    updateInstance: {\n      name: \"UpdateInstance\",\n      I: UpdateInstanceRequest,\n      O: UpdateInstanceResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.UpdateItem\n     */\n    updateItem: {\n      name: \"UpdateItem\",\n      I: UpdateItemRequest,\n      O: UpdateItemResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.UpdateApp\n     */\n    updateApp: {\n      name: \"UpdateApp\",\n      I: UpdateAppRequest,\n      O: UpdateAppResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.UpdateTrade\n     */\n    updateTrade: {\n      name: \"UpdateTrade\",\n      I: UpdateTradeRequest,\n      O: UpdateTradeResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.UpdateRecipe\n     */\n    updateRecipe: {\n      name: \"UpdateRecipe\",\n      I: UpdateRecipeRequest,\n      O: UpdateRecipeResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.DeleteApp\n     */\n    deleteApp: {\n      name: \"DeleteApp\",\n      I: DeleteAppRequest,\n      O: DeleteAppResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.DeleteInstance\n     */\n    deleteInstance: {\n      name: \"DeleteInstance\",\n      I: DeleteInstanceRequest,\n      O: DeleteInstanceResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.CloseTrade\n     */\n    closeTrade: {\n      name: \"CloseTrade\",\n      I: CloseTradeRequest,\n      O: CloseTradeResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc connectrpc.eliza.v1.ElizaService.VerifyKey\n     */\n    verifyKey: {\n      name: \"VerifyKey\",\n      I: VerifyKeyRequest,\n      O: VerifyKeyResponse,\n      kind: MethodKind.Unary,\n    },\n  }\n} as const;\n\n","(function () {\n  require('./lib/main').config(\n    Object.assign(\n      {},\n      require('./lib/env-options'),\n      require('./lib/cli-options')(process.argv)\n    )\n  )\n})()\n"],"mappings":"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","names":["ScalarType","LongType","WireType","makeReadOptions","makeWriteOptions","writeScalar","readScalar","writeEnum","writeScalar","val","a","MethodKind","MethodIdempotency","App","_App"]}