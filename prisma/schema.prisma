generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionLevels {
  ADMIN
  WRITE
  WRITE_SPECIFIC
  READ_PRIVATE
  READ
}

model App {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  key         String           @unique // Unique UUID as key
  description String?
  permissions PermissionLevels @default(value: READ)
  specific    String[]
  public      Boolean          @default(false)
  metadata    Json? // Optional metadata (JSON)
}

model Identity {
  slack           String           @id @unique // Slack ID
  inventory       Instance[] // Instance IDs (ref)
  permissions     PermissionLevels @default(value: READ)
  initiatorTrades Trade[]          @relation("initiator")
  receiverTrades  Trade[]          @relation("receiver")
  metadata        Json? // Optional metadata (JSON)
}

model Item {
  name        String     @id @unique // Name
  image       String? // Image
  description String? // Description
  reaction    String? // Slack reaction tag
  commodity   Boolean    @default(false) // Commodity
  tradable    Boolean    @default(true) // Tradable
  instances   Instance[] // Instance IDs (ref)
  public      Boolean    @default(false)
  metadata    Json? // Optional metadata (JSON)
}

model Instance {
  id              Int      @id @default(autoincrement())
  itemId          String // Item ID (ref)
  identityId      String // Identity ID (ref)
  item            Item     @relation(fields: [itemId], references: [name])
  identity        Identity @relation(fields: [identityId], references: [slack])
  quantity        Int      @default(0) // Quantity (if item.commodity == true)
  metadata        Json? // Optional metadata (JSON)
  initiatorTrades Trade[]  @relation("initiatorTrades")
  receiverTrades  Trade[]  @relation("receiverTrades")
  public          Boolean  @default(true)
}

model Trade {
  id                  Int        @id @default(autoincrement())
  initiatorIdentityId String
  receiverIdentityId  String
  initiator           Identity   @relation("initiator", fields: [initiatorIdentityId], references: [slack])
  receiver            Identity   @relation("receiver", fields: [receiverIdentityId], references: [slack])
  initiatorTrades     Instance[] @relation("initiatorTrades")
  receiverTrades      Instance[] @relation("receiverTrades")
  public              Boolean    @default(true)
  closed              Boolean    @default(false)
}

// model Recipe {
//   id Int @id @default(autoincrement())
//   inputIds String[]
//   inputs Item[] @relation(fields: [inputIds], references: [name])
//   outputIds String[]
//   outputs Item[]
// }
