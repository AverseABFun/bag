generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum PermissionLevels {
  ADMIN
  WRITE
  WRITE_SPECIFIC
  READ_PRIVATE
  READ
}

model App {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  key             String
  description     String?
  permissions     PermissionLevels @default(value: READ)
  specificApps    Int[]
  specificItems   String[]
  specificTrades  Int[]
  specificRecipes Int[]
  public          Boolean          @default(false)
  metadata        Json             @default("{}")
}

model Identity {
  slack           String           @id @unique
  inventory       Instance[]
  skills          SkillInstance[]
  permissions     PermissionLevels @default(value: READ)
  initiatorTrades Trade[]          @relation("initiator")
  receiverTrades  Trade[]          @relation("receiver")
  metadata        Json             @default("{}")
  specificApps    Int[]
  specificItems   String[]
  specificTrades  Int[]
  specificRecipes Int[]
}

model Item {
  name          String     @id @unique
  image         String?
  description   String?
  reaction      String?
  commodity     Boolean    @default(false)
  tradable      Boolean    @default(true)
  instances     Instance[]
  public        Boolean    @default(false)
  metadata      Json       @default("{}")
  recipeInputs  Recipe[]   @relation("recipeInputs")
  recipeOutputs Recipe[]   @relation("recipeOutputs")
  recipeTools   Recipe[]   @relation("recipeTools")
}

model Instance {
  id         Int             @id @default(autoincrement())
  itemId     String
  identityId String?
  item       Item            @relation(fields: [itemId], references: [name])
  identity   Identity?       @relation(fields: [identityId], references: [slack])
  quantity   Int             @default(0)
  metadata   Json            @default("{}")
  public     Boolean         @default(true)
  trades     TradeInstance[]
}

model Skill {
  name         String          @id @unique
  maxLevel     Int?
  description  String?
  reaction     String?
  metadata     Json            @default("{}")
  recipeInputs Recipe[]        @relation("recipeInputs")
  havers       SkillInstance[]
}

model SkillInstance {
  id         Int      @id @default(autoincrement())
  skillId    String
  identityId String
  skill      Skill    @relation(fields: [skillId], references: [name])
  identity   Identity @relation(fields: [identityId], references: [slack])
  level      Int      @default(1)
  metadata   Json     @default("{}")
}

model Trade {
  id                  Int             @id @default(autoincrement())
  initiatorIdentityId String
  receiverIdentityId  String
  initiator           Identity        @relation("initiator", fields: [initiatorIdentityId], references: [slack])
  receiver            Identity        @relation("receiver", fields: [receiverIdentityId], references: [slack])
  initiatorTrades     TradeInstance[] @relation("initiatorTrades")
  receiverTrades      TradeInstance[] @relation("receiverTrades")
  initiatorAgreed     Boolean         @default(false)
  receiverAgreed      Boolean         @default(false)
  public              Boolean         @default(true)
  closed              Boolean         @default(false)
}

model TradeInstance {
  id              Int      @id @default(autoincrement())
  instanceId      Int
  instance        Instance @relation(fields: [instanceId], references: [id])
  initiatorTrades Trade[]  @relation("initiatorTrades")
  receiverTrades  Trade[]  @relation("receiverTrades")
  quantity        Int      @default(1)
}

model Recipe {
  id      Int     @id @default(autoincrement())
  inputs  Item[]  @relation("recipeInputs")
  skills  Skill[] @relation("recipeInputs")
  outputs Item[]  @relation("recipeOutputs")
  tools   Item[]  @relation("recipeTools")
  public  Boolean @default(true)
}

enum LoggerLevels {
  ERROR
  GENERAL
}

model Logger {
  id       Int          @id @default(autoincrement())
  level    LoggerLevels @default(GENERAL)
  contents String
}
