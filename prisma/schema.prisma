generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionLevels {
  ADMIN
  WRITE
  WRITE_SPECIFIC
  READ_PRIVATE
  READ
}

model App {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  key             String           @unique // Unique UUID as key
  description     String?
  permissions     PermissionLevels @default(value: READ)
  // These are all strings and not otherwise because there's no public facing value that requires them to have a relation
  specificApps    Int[]
  specificItems   String[]
  specificTrades  String[]
  specificRecipes Int[]
  public          Boolean          @default(false)
  metadata        Json? // Optional metadata (JSON)
}

model Identity {
  slack           String           @id @unique // Slack ID
  inventory       Instance[] // Instance IDs (ref)
  permissions     PermissionLevels @default(value: READ)
  initiatorTrades Trade[]          @relation("initiator")
  receiverTrades  Trade[]          @relation("receiver")
  metadata        Json? // Optional metadata (JSON)
  // These are all strings and not otherwise because there's no public facing value that requires them to have a relation
  specificApps    Int[]
  specificItems   String[]
  specificTrades  String[]
  specificRecipes Int[]
}

model Item {
  name          String     @id @unique // Name
  image         String? // Image
  description   String? // Description
  reaction      String? // Slack reaction tag
  commodity     Boolean    @default(false) // Commodity
  tradable      Boolean    @default(true) // Tradable
  instances     Instance[] // Instance IDs (ref)
  public        Boolean    @default(false)
  metadata      Json? // Optional metadata (JSON)
  recipeInputs  Recipe[]   @relation("recipeInputs")
  recipeOutputs Recipe[]   @relation("recipeOutputs")
}

model Instance {
  id              Int      @id @default(autoincrement())
  itemId          String // Item ID (ref)
  identityId      String // Identity ID (ref)
  item            Item     @relation(fields: [itemId], references: [name])
  identity        Identity @relation(fields: [identityId], references: [slack])
  quantity        Int      @default(0) // Quantity (if item.commodity == true)
  metadata        Json? // Optional metadata (JSON)
  initiatorTrades Trade[]  @relation("initiatorTrades")
  receiverTrades  Trade[]  @relation("receiverTrades")
  public          Boolean  @default(true)
}

model Trade {
  id                  Int        @id @default(autoincrement())
  initiatorIdentityId String
  receiverIdentityId  String
  initiator           Identity   @relation("initiator", fields: [initiatorIdentityId], references: [slack])
  receiver            Identity   @relation("receiver", fields: [receiverIdentityId], references: [slack])
  initiatorTrades     Instance[] @relation("initiatorTrades")
  receiverTrades      Instance[] @relation("receiverTrades")
  initiatorAgreed     Boolean    @default(false)
  receiverAgreed      Boolean    @default(false)
  public              Boolean    @default(true)
  closed              Boolean    @default(false)
}

model Recipe {
  id      Int    @id @default(autoincrement())
  inputs  Item[] @relation("recipeInputs")
  outputs Item[] @relation("recipeOutputs")
}
