syntax = "proto3";

package connectrpc.eliza.v1;

service ElizaService {
  // Response to request
  rpc CreateApp(CreateAppRequest) returns (CreateAppResponse) {}  // Should be able to create apps as an admin
  rpc CreateInstance(CreateInstanceRequest) returns (CreateInstanceResponse) {}  // Should be able to create and assign instances, depending on permissions
  rpc CreateItem(CreateItemRequest) returns (CreateItemResponse) {}  // Should be able to create items, depending on permissions
  rpc CreateRecipe(CreateRecipeRequest) returns (CreateRecipeResponse) {}  // Should be able to create recipes that include items the app has access to
  rpc CreateTrade(CreateTradeRequest) returns (CreateTradeResponse) {}  // Should be able to initiate trades that include items
  rpc ReadIdentity(ReadIdentityRequest) returns (ReadIdentityResponse) {}  // Should be able to read info about a Slack user
  rpc ReadInventory(ReadInventoryRequest) returns (ReadInventoryResponse) {}  // Should be able to read inventory of a user, including access to private items the app has access to
  rpc ReadItem(ReadItemRequest) returns (ReadItemResponse) {}  // Should be able to read item info, including access to private items the app has access to
  rpc ReadInstance(ReadInstanceRequest) returns (ReadInstanceResponse) {}  // Should be able to read instances
  rpc ReadApp(ReadAppRequest) returns (ReadAppResponse) {}  // Should be able to read other public apps, as well as itself
  rpc ReadTrade(ReadTradeRequest) returns (ReadTradeResponse) {} // Should be able to read public trades as well as trades the app has initiated
  rpc ReadRecipe(ReadRecipeRequest) returns (ReadRecipeResponse) {}  // Should be able to read recipes that include items the app has access to
  rpc UpdateIdentityMetadata(UpdateIdentityMetadataRequest) returns (UpdateIdentityMetadataResponse) {}  // Only things apps should be able to update - metadata 
  rpc UpdateInstance(UpdateInstanceRequest) returns (UpdateInstanceResponse) {}  // Should be able to update instances that are instances of items the app has access to
  rpc UpdateItem(UpdateItemRequest) returns (UpdateItemResponse) {}  // Should be able to update items the app has access to
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse) {}  // Should be able to update own data
  rpc UpdateTrade(UpdateTradeRequest) returns (UpdateTradeResponse) {}  // Should be able to update trades the app has access to
  rpc UpdateRecipe (UpdateRecipeRequest) returns (UpdateRecipeResponse) {} // Should be able to update recipes the app has access to
  rpc DeleteApp(DeleteAppRequest) returns (DeleteAppResponse) {} // Should be able to delete apps as a admin
  rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse) {}  // Should be able to delete instances that the app has access to
  rpc CloseTrade(CloseTradeRequest) returns (CloseTradeResponse) {} // Should be able to close instances that the app has access to
  rpc VerifyKey(VerifyKeyRequest) returns (VerifyKeyResponse) {}
}

// ! All requests should come with an appId and a key
message App {
  int32 id = 1;
  string name = 2;
  string description = 3;
  string permissions = 4;
  bool public = 5;
  string metadata = 6;
}

message Identity {
  string slack = 1;
  repeated Instance inventory = 2;
  string metadata = 3;
}

message Item {
  string name = 1;
  string image = 2;
  string description = 3;
  string reaction = 4;
  bool commodity = 5;
  bool tradable = 6;
  bool public = 7;
  string metadata = 8;
}

message Instance {
  int32 id = 1;
  string itemId = 2;
  string identityId = 3;
  Item item = 4;
}

message RecipeResponse {
  int32 id = 1;
}

message Trade {
  int32 id = 1;
  string initiatorIdentityId = 2;
  string receiverIdentityId = 3;
  bool public = 4;
  bool closed = 5;
}

message CreateInstanceRequest {
  int32 appId = 1;
  string key = 2;
  string itemId = 3;
  string identityId = 4;
  int32 quantity = 5;
  string metadata = 6;
  string note = 7;
}

message CreateInstanceResponse {
  string response = 1;
  Instance instance = 2;
}

message CreateAppRequest {
  int32 appId = 1;
  string key = 2;
  string name = 3;
  string description = 4;
  int32 permissions = 5;
  bool public = 6;
  string metadata = 7;
}

message CreateAppResponse {
  string response = 1;
  App app = 2;
}

message CreateItemRequest {
  int32 appId = 1;
  string key = 2;
  Item item = 3;
}

message CreateItemResponse {
  string response = 1;
  Item item = 2;
}

message CreateRecipeRequest {
  int32 appId = 1;
  string key = 2;
}

message CreateRecipeResponse {
  string response = 1;
}

message CreateTradeRequest {
  int32 appId = 1;
  string key = 2;
  string initiator = 3;
  string receiver = 4;
  bool public = 5;
}

message CreateTradeResponse {
  string response = 1;
  Trade trade = 2;
}

message ReadIdentityRequest {
  int32 appId = 1;
  string key = 2;
  string identityId = 3;
}

message ReadIdentityResponse {
  string response = 1;
  Identity identity = 2;
}

message ReadInventoryRequest {
  int32 appId = 1;
  string key = 2;
  string identityId = 3;
}

message ReadInventoryResponse {
  string response = 1;
  repeated Instance inventory = 2;
}

message ReadItemRequest {
  int32 appId = 1;
  string key = 2;
  string query = 3;
}

message ReadItemResponse {
  string response = 1;
  repeated Item items = 2;
}

message ReadInstanceRequest {
  int32 appId = 1;
  string key = 2;
  int32 instanceId = 3;
}

message ReadInstanceResponse {
  string response = 1;
  Instance instance = 2;
}

message ReadAppRequest {
  int32 appId = 1;
  string key = 2;
  int32 optAppId = 3;
}

message ReadAppResponse {
  string response = 1;
  App app = 2;
}

message ReadTradeRequest {
  int32 appId = 1;
  string key = 2;
  int32 tradeId = 3;
}

message ReadTradeResponse {
  string response = 1;
  Trade trade = 2;
}

message ReadRecipeRequest {
  int32 appId = 1;
  string key = 2;
}

message ReadRecipeResponse {
  string response = 1;
}

message UpdateIdentityMetadataRequest {
  int32 appId = 1;
  string key = 2;
  string metadata = 3;
}

message UpdateIdentityMetadataResponse {
  string response = 1;
  Identity identity = 2;
}

message UpdateInstanceRequest {
  int32 appId = 1;
  string key = 2;
  int32 instanceId = 3;
  Instance new = 4;
}

message UpdateInstanceResponse {
  string response = 1;
  Instance instance = 2;
}

message UpdateItemRequest {
  int32 appId = 1;
  string key = 2;
  string itemId = 3;
  Item new = 4;
}

message UpdateItemResponse {
  string response = 1;
  Item item = 2;
}

message UpdateAppRequest {
  int32 appId = 1;
  string key = 2;
  int32 optAppId = 3;
  App new = 4;
}

message UpdateAppResponse {
  string response = 1;
  App app = 2;
}

message UpdateTradeRequest {
  int32 appId = 1;
  string key = 2;
}

message UpdateTradeResponse {
  string response = 1;
}

message UpdateRecipeRequest {
  int32 appId = 1;
  string key = 2;
}

message UpdateRecipeResponse {
  string response = 1;
}

message DeleteAppRequest {
  int32 appId = 1;
  string key = 2;
  int32 deleteAppId = 3;
}

message DeleteAppResponse {
  string response = 1;
}

message DeleteInstanceRequest {
  int32 appId = 1;
  string key = 2;
  int32 instanceId = 3;
}

message DeleteInstanceResponse {
  string response = 1;
  Instance deletedInstance = 2;
}

message CloseTradeRequest {
  int32 appId = 1;
  string key = 2;
}

message CloseTradeResponse {
  string response = 1;
}

message VerifyKeyRequest {
  int32 appId = 1;
  string key = 2;
}

message VerifyKeyResponse {
  bool valid = 1;
}